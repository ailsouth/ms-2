#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.7 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 32 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 59 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 255 255 20 20 20 -1 -1
2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 96 128 255 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 96 128 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 92 -1 90 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 167 117 255 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 92 -1 90 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 167 117 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1           0 6306 0 32 3 10 #"#lang play"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 2 #"#|"
0 0 18 29 1 #"\n"
0 0 18 3 16 #"<expr> ::= <num>"
0 0 18 29 1 #"\n"
0 0 18 3 17 #"         | <bool>"
0 0 18 29 1 #"\n"
0 0 18 3 15 #"         | <id>"
0 0 18 29 1 #"\n"
0 0 18 3 19 #"         | <string>"
0 0 18 29 1 #"\n"
0 0 18 3 36 #"         | {if <expr> <expr> <expr>}"
0 0 18 29 1 #"\n"
0 0 18 3 33 #"         | {fun {<id>*}}  <expr>}"
0 0 18 29 1 #"\n"
0 0 18 3 27 #"         | {<expr> <expr>*}"
0 0 18 29 1 #"\n"
0 0 18 3 34 #"         | {local {<def>*} <expr>}"
0 0 18 29 1 #"\n"
0 0 18 3 33 #"         | {match <expr> <case>+}"
0 0 18 29 1 #"\n"
0 0 18 3 2 #"<c"
0 0 18 3 37 #"ase> ::= {'case <pattern> '=> <expr>}"
0 0 18 29 1 #"\n"
0 0 18 3 19 #"<pattern> ::= <num>"
0 0 18 29 1 #"\n"
0 0 18 3 17 #"         | <bool>"
0 0 18 29 1 #"\n"
0 0 18 3 19 #"         | <string>"
0 0 18 29 1 #"\n"
0 0 18 3 15 #"         | <id>"
0 0 18 29 1 #"\n"
0 0 18 3 35 #"         | (<constr-id> <attr-id>*)"
0 0 18 29 1 #"\n"
0 0 18 3 31 #"<def>  ::= {define <id> <expr>}"
0 0 18 29 1 #"\n"
0 0 18 3 53 #"         | {datatype <typename> <type-constructor>*}}"
0 0 18 29 1 #"\n"
0 0 18 3 22 #"<type-constructor> ::="
0 0 18 3 17 #" {<id> <member>*}"
0 0 18 29 1 #"\n"
0 0 18 3 21 #"<constr-id> :: = <id>"
0 0 18 29 1 #"\n"
0 0 18 3 19 #"<attr-id> :: = <id>"
0 0 18 29 1 #"\n"
0 0 18 3 20 #"<typename> :: = <id>"
0 0 18 29 1 #"\n"
0 0 18 3 20 #"<member>   :: = <id>"
0 0 18 29 1 #"\n"
0 0 18 3 2 #"|#"
0 0 28 29 1 #"\n"
0 0 18 3 13 #"; expresiones"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 7 #"deftype"
0 0 28 3 1 #" "
0 0 14 3 4 #"Expr"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 3 #"num"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 4 #"bool"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 3 #"str"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 3 #"ifc"
0 0 28 3 1 #" "
0 0 14 3 1 #"c"
0 0 28 3 1 #" "
0 0 14 3 1 #"t"
0 0 28 3 1 #" "
0 0 14 3 1 #"f"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 3 #"app"
0 0 28 3 1 #" "
0 0 14 3 8 #"fun-expr"
0 0 28 3 1 #" "
0 0 14 3 13 #"arg-expr-list"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 8 #"prim-app"
0 0 28 3 1 #" "
0 0 14 3 4 #"name"
0 0 28 3 1 #" "
0 0 14 3 4 #"args"
0 0 28 3 4 #")   "
0 0 18 3 27 #"; aplicaci\303\263n de primitivas"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 3 #"fun"
0 0 28 3 1 #" "
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 14 3 4 #"body"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 4 #"lcal"
0 0 28 3 1 #" "
0 0 16 3 4 #"defs"
0 0 28 3 1 #" "
0 0 14 3 4 #"body"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 4 #"mtch"
0 0 28 3 1 #" "
0 0 14 3 3 #"val"
0 0 28 3 1 #" "
0 0 16 3 5 #"cases"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 14 #"; definiciones"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 7 #"deftype"
0 0 28 3 1 #" "
0 0 14 3 3 #"Def"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 5 #"dfine"
0 0 28 3 1 #" "
0 0 14 3 4 #"name"
0 0 28 3 1 #" "
0 0 14 3 8 #"val-expr"
0 0 28 3 2 #") "
0 0 18 3 8 #"; define"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 8 #"datatype"
0 0 28 3 1 #" "
0 0 14 3 4 #"name"
0 0 28 3 1 #" "
0 0 14 3 8 #"variants"
0 0 28 3 3 #")) "
0 0 18 3 10 #"; datatype"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 11 #"; variantes"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 7 #"deftype"
0 0 28 3 1 #" "
0 0 14 3 7 #"Variant"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 7 #"variant"
0 0 28 3 1 #" "
0 0 14 3 4 #"name"
0 0 28 3 1 #" "
0 0 14 3 6 #"params"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 22 #"; estructuras de datos"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 7 #"deftype"
0 0 28 3 1 #" "
0 0 14 3 6 #"Struct"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 7 #"structV"
0 0 28 3 1 #" "
0 0 14 3 4 #"name"
0 0 28 3 1 #" "
0 0 14 3 7 #"variant"
0 0 28 3 1 #" "
0 0 14 3 6 #"values"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 26 #"; caso en pattern matching"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 7 #"deftype"
0 0 28 3 1 #" "
0 0 14 3 4 #"Case"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 3 #"cse"
0 0 28 3 1 #" "
0 0 14 3 7 #"pattern"
0 0 28 3 1 #" "
0 0 14 3 4 #"body"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 9 #"; patr\303\263n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 7 #"deftype"
0 0 28 3 1 #" "
0 0 14 3 7 #"Pattern"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 3 #"idP"
0 0 28 3 1 #" "
0 0 14 3 2 #"id"
0 0 28 3 2 #") "
0 0 18 3 15 #"; identificador"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 4 #"litP"
0 0 28 3 1 #" "
0 0 14 3 1 #"l"
0 0 28 3 2 #") "
0 0 18 3 16 #"; valor literal "
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 7 #"constrP"
0 0 28 3 1 #" "
0 0 14 3 3 #"ctr"
0 0 28 3 1 #" "
0 0 14 3 8 #"patterns"
0 0 28 3 3 #")) "
0 0 18 3 28 #"; constructor y sub-patrones"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 26 #";; parse :: s-expr -> Expr"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 1 #"("
0 0 14 3 5 #"parse"
0 0 28 3 1 #" "
0 0 14 3 6 #"s-expr"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 14 3 6 #"s-expr"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 28 3 1 #" "
0 0 14 3 7 #"number?"
0 0 28 3 3 #") ("
0 0 14 3 3 #"num"
0 0 28 3 1 #" "
0 0 14 3 6 #"s-expr"
0 0 28 3 2 #")]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 28 3 1 #" "
0 0 14 3 8 #"boolean?"
0 0 28 3 3 #") ("
0 0 14 3 4 #"bool"
0 0 28 3 1 #" "
0 0 14 3 6 #"s-expr"
0 0 28 3 2 #")]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 28 3 1 #" "
0 0 14 3 7 #"string?"
0 0 28 3 3 #") ("
0 0 14 3 3 #"str"
0 0 28 3 1 #" "
0 0 14 3 6 #"s-expr"
0 0 28 3 2 #")]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 28 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 28 3 3 #") ("
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 14 3 6 #"s-expr"
0 0 28 3 6 #")]    "
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 2 #"if"
0 0 28 3 1 #" "
0 0 14 3 1 #"c"
0 0 28 3 1 #" "
0 0 14 3 1 #"t"
0 0 28 3 1 #" "
0 0 14 3 1 #"f"
0 0 28 3 3 #") ("
0 0 14 3 3 #"ifc"
0 0 28 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 28 3 1 #" "
0 0 14 3 1 #"c"
0 0 28 3 3 #") ("
0 0 14 3 5 #"parse"
0 0 28 3 1 #" "
0 0 14 3 1 #"t"
0 0 28 3 3 #") ("
0 0 14 3 5 #"parse"
0 0 28 3 1 #" "
0 0 14 3 1 #"f"
0 0 28 3 3 #"))]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 3 #"fun"
0 0 28 3 1 #" "
0 0 14 3 2 #"xs"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 3 #") ("
0 0 14 3 3 #"fun"
0 0 28 3 1 #" "
0 0 14 3 2 #"xs"
0 0 28 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 3 #"))]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 16 3 5 #"local"
0 0 28 3 1 #" "
0 0 16 3 4 #"defs"
0 0 28 3 1 #" "
0 0 14 3 4 #"body"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ("
0 0 14 3 4 #"lcal"
0 0 28 3 2 #" ("
0 0 14 3 3 #"map"
0 0 28 3 1 #" "
0 0 14 3 9 #"parse-def"
0 0 28 3 1 #" "
0 0 16 3 4 #"defs"
0 0 28 3 3 #") ("
0 0 14 3 5 #"parse"
0 0 28 3 1 #" "
0 0 14 3 4 #"body"
0 0 28 3 4 #"))] "
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 14 3 8 #"val-expr"
0 0 28 3 1 #" "
0 0 16 3 5 #"cases"
0 0 28 3 1 #" "
0 0 14 3 3 #"..."
0 0 28 3 2 #") "
0 0 18 3 38 #"; note the elipsis to match n elements"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ("
0 0 14 3 4 #"mtch"
0 0 28 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 28 3 1 #" "
0 0 14 3 8 #"val-expr"
0 0 28 3 3 #") ("
0 0 14 3 3 #"map"
0 0 28 3 1 #" "
0 0 14 3 10 #"parse-case"
0 0 28 3 1 #" "
0 0 16 3 5 #"cases"
0 0 28 3 4 #"))] "
0 0 18 3 17 #"; cases is a list"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 4 #"list"
0 0 28 3 2 #"  "
0 0 14 3 1 #"a"
0 0 28 3 1 #" "
0 0 14 3 3 #"..."
0 0 28 3 6 #")    ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 1 #"="
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 2 #" ("
0 0 14 3 6 #"length"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 33 #"))                               "
0 0 18 3 5 #";MINE"
0 0 28 29 1 #"\n"
0 0 28 3 33 #"                                ("
0 0 14 3 3 #"app"
0 0 28 3 2 #" ("
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 4 #"Cons"
0 0 28 3 3 #") ("
0 0 14 3 4 #"list"
0 0 28 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 28 3 2 #" ("
0 0 14 3 3 #"car"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 4 #")) ("
0 0 14 3 3 #"app"
0 0 28 3 2 #" ("
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 5 #"Empty"
0 0 28 3 2 #") "
0 0 24 3 1 #"'"
0 0 28 3 5 #"())))"
0 0 28 29 1 #"\n"
0 0 28 3 33 #"                                ("
0 0 14 3 3 #"app"
0 0 28 3 2 #" ("
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 4 #"Cons"
0 0 28 3 3 #") ("
0 0 14 3 4 #"list"
0 0 28 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 28 3 2 #" ("
0 0 14 3 3 #"car"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 4 #")) ("
0 0 14 3 5 #"parse"
0 0 28 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 4 #"list"
0 0 28 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 5 #")))))"
0 0 28 29 1 #"\n"
0 0 28 3 34 #"                                )]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 14 3 1 #"f"
0 0 28 3 1 #" "
0 0 14 3 4 #"args"
0 0 28 3 1 #" "
0 0 14 3 3 #"..."
0 0 28 3 2 #") "
0 0 18 3 11 #"; same here"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 4 #"assq"
0 0 28 3 1 #" "
0 0 14 3 1 #"f"
0 0 28 3 1 #" "
0 0 14 3 12 #"*primitives*"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"         ("
0 0 14 3 8 #"prim-app"
0 0 28 3 1 #" "
0 0 14 3 1 #"f"
0 0 28 3 2 #" ("
0 0 14 3 3 #"map"
0 0 28 3 1 #" "
0 0 14 3 5 #"parse"
0 0 28 3 1 #" "
0 0 14 3 4 #"args"
0 0 28 3 3 #")) "
0 0 18 3 16 #"; args is a list"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"         ("
0 0 14 3 3 #"app"
0 0 28 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 28 3 1 #" "
0 0 14 3 1 #"f"
0 0 28 3 3 #") ("
0 0 14 3 3 #"map"
0 0 28 3 1 #" "
0 0 14 3 5 #"parse"
0 0 28 3 1 #" "
0 0 14 3 4 #"args"
0 0 28 3 6 #")))]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 5 #"alist"
0 0 28 3 1 #" "
0 0 14 3 1 #"p"
0 0 28 3 63
#")                                                              "
0 0 18 3 13 #";MINE        "
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 14 3 1 #"p"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"cons"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 3 #") ("
0 0 14 3 7 #"constrP"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 4 #"Cons"
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 2 #" ("
0 0 14 3 13 #"parse-pattern"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 3 #") ("
0 0 14 3 5 #"alist"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 4 #")))]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 2 #" ("
0 0 14 3 7 #"constrP"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 5 #"Empty"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 4 #"())]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    ))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 28 #"; parse-def :: s-expr -> Def"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 1 #"("
0 0 14 3 9 #"parse-def"
0 0 28 3 1 #" "
0 0 14 3 6 #"s-expr"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 14 3 6 #"s-expr"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 14 3 8 #"val-expr"
0 0 28 3 3 #") ("
0 0 14 3 5 #"dfine"
0 0 28 3 1 #" "
0 0 14 3 2 #"id"
0 0 28 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 28 3 1 #" "
0 0 14 3 8 #"val-expr"
0 0 28 3 3 #"))]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 8 #"datatype"
0 0 28 3 1 #" "
0 0 14 3 4 #"name"
0 0 28 3 1 #" "
0 0 14 3 8 #"variants"
0 0 28 3 1 #" "
0 0 14 3 3 #"..."
0 0 28 3 3 #") ("
0 0 14 3 8 #"datatype"
0 0 28 3 1 #" "
0 0 14 3 4 #"name"
0 0 28 3 2 #" ("
0 0 14 3 3 #"map"
0 0 28 3 1 #" "
0 0 14 3 13 #"parse-variant"
0 0 28 3 1 #" "
0 0 14 3 8 #"variants"
0 0 28 3 5 #"))]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 35 #"; parse-variant :: sexpr -> Variant"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 1 #"("
0 0 14 3 13 #"parse-variant"
0 0 28 3 1 #" "
0 0 14 3 1 #"v"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 14 3 1 #"v"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 14 3 4 #"name"
0 0 28 3 1 #" "
0 0 14 3 6 #"params"
0 0 28 3 1 #" "
0 0 14 3 3 #"..."
0 0 28 3 3 #") ("
0 0 14 3 7 #"variant"
0 0 28 3 1 #" "
0 0 14 3 4 #"name"
0 0 28 3 1 #" "
0 0 14 3 6 #"params"
0 0 28 3 4 #")]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 29 #"; parse-case :: sexpr -> Case"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 1 #"("
0 0 14 3 10 #"parse-case"
0 0 28 3 1 #" "
0 0 14 3 1 #"c"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 14 3 1 #"c"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 16 3 4 #"case"
0 0 28 3 1 #" "
0 0 14 3 7 #"pattern"
0 0 28 3 1 #" "
0 0 14 3 2 #"=>"
0 0 28 3 1 #" "
0 0 14 3 4 #"body"
0 0 28 3 3 #") ("
0 0 14 3 3 #"cse"
0 0 28 3 2 #" ("
0 0 14 3 13 #"parse-pattern"
0 0 28 3 1 #" "
0 0 14 3 7 #"pattern"
0 0 28 3 3 #") ("
0 0 14 3 5 #"parse"
0 0 28 3 1 #" "
0 0 14 3 4 #"body"
0 0 28 3 5 #"))]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 35 #"; parse-pattern :: sexpr -> Pattern"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 1 #"("
0 0 14 3 13 #"parse-pattern"
0 0 28 3 1 #" "
0 0 14 3 1 #"p"
0 0 28 3 3 #")  "
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 14 3 1 #"p"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 28 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 28 3 4 #")  ("
0 0 14 3 3 #"idP"
0 0 28 3 1 #" "
0 0 14 3 1 #"p"
0 0 28 3 2 #")]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 28 3 1 #" "
0 0 14 3 7 #"number?"
0 0 28 3 4 #")  ("
0 0 14 3 4 #"litP"
0 0 28 3 2 #" ("
0 0 14 3 3 #"num"
0 0 28 3 1 #" "
0 0 14 3 1 #"p"
0 0 28 3 3 #"))]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 28 3 1 #" "
0 0 14 3 8 #"boolean?"
0 0 28 3 3 #") ("
0 0 14 3 4 #"litP"
0 0 28 3 2 #" ("
0 0 14 3 4 #"bool"
0 0 28 3 1 #" "
0 0 14 3 1 #"p"
0 0 28 3 3 #"))]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 28 3 1 #" "
0 0 14 3 7 #"string?"
0 0 28 3 4 #")  ("
0 0 14 3 4 #"litP"
0 0 28 3 2 #" ("
0 0 14 3 3 #"str"
0 0 28 3 1 #" "
0 0 14 3 1 #"p"
0 0 28 3 43 #"))]                                        "
0 0 18 3 5 #";MINE"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 14 3 7 #"pattern"
0 0 28 3 1 #" "
0 0 14 3 3 #"..."
0 0 28 3 3 #") ("
0 0 14 3 5 #"alist"
0 0 28 3 1 #" "
0 0 14 3 7 #"pattern"
0 0 28 3 2 #")]"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 14 3 3 #"ctr"
0 0 28 3 1 #" "
0 0 14 3 8 #"patterns"
0 0 28 3 1 #" "
0 0 14 3 3 #"..."
0 0 28 3 3 #") ("
0 0 14 3 7 #"constrP"
0 0 28 3 2 #" ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 1 #"p"
0 0 28 3 3 #") ("
0 0 14 3 3 #"map"
0 0 28 3 1 #" "
0 0 14 3 13 #"parse-pattern"
0 0 28 3 1 #" "
0 0 14 3 8 #"patterns"
0 0 28 3 5 #"))]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 2 #"#;"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 6 #"strict"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 41 #")                                        "
0 0 18 3 5 #";MINE"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 5 #"exprV"
0 0 28 3 1 #" "
0 0 14 3 4 #"expr"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 3 #") ("
0 0 14 3 6 #"strict"
0 0 28 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 28 3 1 #" "
0 0 14 3 4 #"expr"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 3 #"))]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 3 #"]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 6 #"strict"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 5 #"exprV"
0 0 28 3 1 #" "
0 0 14 3 4 #"expr"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 1 #" "
0 0 14 3 5 #"cache"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 3 #"not"
0 0 28 3 2 #" ("
0 0 14 3 5 #"unbox"
0 0 28 3 1 #" "
0 0 14 3 5 #"cache"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"         ("
0 0 16 3 5 #"local"
0 0 28 3 3 #" (["
0 0 16 3 3 #"def"
0 0 28 3 1 #" "
0 0 14 3 3 #"val"
0 0 28 3 2 #" ("
0 0 14 3 6 #"strict"
0 0 28 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 28 3 1 #" "
0 0 14 3 4 #"expr"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 4 #"))])"
0 0 28 29 1 #"\n"
0 0 28 3 11 #"           "
0 0 18 3 37 #";(printf \"Forcing exprV to ~v~n\" val)"
0 0 28 29 1 #"\n"
0 0 28 3 12 #"           ("
0 0 14 3 8 #"set-box!"
0 0 28 3 1 #" "
0 0 14 3 5 #"cache"
0 0 28 3 1 #" "
0 0 14 3 3 #"val"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 11 #"           "
0 0 14 3 3 #"val"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"         ("
0 0 16 3 5 #"begin"
0 0 28 29 1 #"\n"
0 0 28 3 11 #"           "
0 0 18 3 48 #";(printf \"Using cached value~v~n\" (unbox cache))"
0 0 28 29 1 #"\n"
0 0 28 3 12 #"           ("
0 0 14 3 5 #"unbox"
0 0 28 3 1 #" "
0 0 14 3 5 #"cache"
0 0 28 3 4 #")))]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 3 #"]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 10 #";; lazyVal"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 7 #"deftype"
0 0 28 3 1 #" "
0 0 14 3 3 #"Val"
0 0 28 3 40 #"                                        "
0 0 18 3 5 #";MINE"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 5 #"exprV"
0 0 28 3 1 #" "
0 0 14 3 4 #"expr"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 1 #" "
0 0 14 3 5 #"cache"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 7 #"deftype"
0 0 28 3 1 #" "
0 0 14 3 10 #"isLazyExpr"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 5 #"lexpr"
0 0 28 3 1 #" "
0 0 14 3 3 #"exp"
0 0 28 3 1 #" "
0 0 14 3 4 #"bool"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  )"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 8 #"lazyList"
0 0 28 3 1 #" "
0 0 14 3 8 #"fun-expr"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 14 3 8 #"fun-expr"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"    [ ("
0 0 14 3 3 #"fun"
0 0 28 3 1 #" "
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 14 3 4 #"body"
0 0 28 3 3 #") ("
0 0 14 3 3 #"map"
0 0 28 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 28 3 2 #" ("
0 0 14 3 1 #"i"
0 0 28 3 3 #") ("
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 14 3 1 #"i"
0 0 28 29 1 #"\n"
0 0 28 3 41 #"                                       [("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 4 #"lazy"
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 3 2 #") "
0 0 24 3 2 #"#t"
0 0 28 3 1 #"]"
0 0 28 29 1 #"\n"
0 0 28 3 40 #"                                       ["
0 0 14 3 4 #"else"
0 0 28 3 1 #" "
0 0 24 3 2 #"#f"
0 0 28 3 4 #"])) "
0 0 14 3 2 #"id"
0 0 28 3 2 #")]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 1 #" "
0 0 24 3 2 #"#f"
0 0 28 3 1 #"]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    )"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  )"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 10 #"deleteLazy"
0 0 28 3 1 #" "
0 0 14 3 6 #"idList"
0 0 28 3 41 #")                                        "
0 0 18 3 5 #";MINE"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 14 3 6 #"idList"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"cons"
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 4 #"lazy"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 2 #") "
0 0 14 3 1 #"b"
0 0 28 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 2 #" ("
0 0 14 3 10 #"deleteLazy"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 3 #"))]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"cons"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 2 #" ("
0 0 14 3 10 #"deleteLazy"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 3 #"))]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 3 #"()]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"   ))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 11 #"replaceLazy"
0 0 28 3 1 #" "
0 0 14 3 8 #"fun-expr"
0 0 28 3 41 #")                                        "
0 0 18 3 5 #";MINE"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 14 3 8 #"fun-expr"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"    [ ("
0 0 14 3 3 #"fun"
0 0 28 3 1 #" "
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 14 3 4 #"body"
0 0 28 3 3 #") ("
0 0 14 3 3 #"fun"
0 0 28 3 2 #" ("
0 0 14 3 10 #"deleteLazy"
0 0 28 3 1 #" "
0 0 14 3 2 #"id"
0 0 28 3 2 #") "
0 0 14 3 4 #"body"
0 0 28 3 2 #")]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 1 #" "
0 0 14 3 8 #"fun-expr"
0 0 28 3 2 #"] "
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    )"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  )"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 9 #"matchLazy"
0 0 28 3 1 #" "
0 0 14 3 4 #"expr"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 42 #" )                                        "
0 0 18 3 5 #";MINE"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 15 #";(println expr)"
0 0 28 29 1 #"\n"
0 0 28 3 4 #"   ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 10 #"lexpr-bool"
0 0 28 3 1 #" "
0 0 14 3 4 #"expr"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 8 #"       ("
0 0 14 3 5 #"exprV"
0 0 28 3 2 #" ("
0 0 14 3 9 #"lexpr-exp"
0 0 28 3 1 #" "
0 0 14 3 4 #"expr"
0 0 28 3 2 #") "
0 0 14 3 3 #"env"
0 0 28 3 2 #" ("
0 0 14 3 3 #"box"
0 0 28 3 1 #" "
0 0 24 3 2 #"#f"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 8 #"       ("
0 0 14 3 6 #"interp"
0 0 28 3 2 #" ("
0 0 14 3 9 #"lexpr-exp"
0 0 28 3 1 #" "
0 0 14 3 4 #"expr"
0 0 28 3 2 #") "
0 0 14 3 3 #"env"
0 0 28 3 3 #") )"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  )"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 10 #"lazyTuplas"
0 0 28 3 1 #" "
0 0 14 3 6 #"aelist"
0 0 28 3 1 #" "
0 0 14 3 5 #"llist"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 18 3 18 #";  (println llist)"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 3 #"def"
0 0 28 3 1 #" "
0 0 14 3 6 #"nllist"
0 0 28 3 2 #" ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 2 #"or"
0 0 28 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 28 3 1 #" "
0 0 14 3 5 #"llist"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 3 #"())"
0 0 28 29 1 #"\n"
0 0 28 3 23 #"                      ("
0 0 14 3 6 #"equal?"
0 0 28 3 1 #" "
0 0 14 3 5 #"llist"
0 0 28 3 1 #" "
0 0 24 3 2 #"#f"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 19 #"                  ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 2 #"#f"
0 0 28 3 1 #" "
0 0 24 3 2 #"#f"
0 0 28 3 2 #" )"
0 0 28 29 1 #"\n"
0 0 28 3 18 #"                  "
0 0 14 3 5 #"llist"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 14 3 6 #"aelist"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"cons"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 28 3 2 #" ("
0 0 14 3 5 #"lexpr"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 2 #" ("
0 0 14 3 3 #"car"
0 0 28 3 1 #" "
0 0 14 3 6 #"nllist"
0 0 28 3 4 #")) ("
0 0 14 3 10 #"lazyTuplas"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 28 3 1 #" "
0 0 14 3 6 #"nllist"
0 0 28 3 4 #")))]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 3 #"()]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    )"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  )"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 3 #"  ("
0 0 14 3 7 #"lazyApp"
0 0 28 3 1 #" "
0 0 14 3 8 #"fun-expr"
0 0 28 3 1 #" "
0 0 14 3 13 #"arg-expr-list"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 43 #" )                                         "
0 0 18 3 5 #";MINE"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 3 #"def"
0 0 28 3 1 #" "
0 0 14 3 11 #"Newfun-expr"
0 0 28 3 2 #" ("
0 0 14 3 11 #"replaceLazy"
0 0 28 3 1 #" "
0 0 14 3 8 #"fun-expr"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 3 #"def"
0 0 28 3 1 #" "
0 0 14 3 5 #"llist"
0 0 28 3 2 #" ("
0 0 14 3 8 #"lazyList"
0 0 28 3 1 #" "
0 0 14 3 8 #"fun-expr"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 3 #"def"
0 0 28 3 1 #" "
0 0 14 3 7 #"ltuplas"
0 0 28 3 2 #" ("
0 0 14 3 10 #"lazyTuplas"
0 0 28 3 1 #" "
0 0 14 3 13 #"arg-expr-list"
0 0 28 3 2 #" ("
0 0 14 3 8 #"lazyList"
0 0 28 3 1 #" "
0 0 14 3 8 #"fun-expr"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"  (  ("
0 0 14 3 6 #"interp"
0 0 28 3 1 #" "
0 0 14 3 11 #"Newfun-expr"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ("
0 0 14 3 3 #"map"
0 0 28 3 3 #"  ("
0 0 16 3 2 #"\316\273"
0 0 28 3 2 #" ("
0 0 14 3 1 #"e"
0 0 28 3 4 #")  ("
0 0 14 3 9 #"matchLazy"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 7 #")     )"
0 0 28 29 1 #"\n"
0 0 28 3 11 #"           "
0 0 14 3 7 #"ltuplas"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     )"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  )"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 48 #";; interp :: Expr Env -> number/procedure/Struct"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 1 #"("
0 0 14 3 6 #"interp"
0 0 28 3 1 #" "
0 0 14 3 4 #"expr"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 14 3 4 #"expr"
0 0 28 29 1 #"\n"
0 0 28 3 4 #"    "
0 0 18 3 10 #"; literals"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 3 #"num"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 2 #") "
0 0 14 3 1 #"n"
0 0 28 3 1 #"]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"bool"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 2 #") "
0 0 14 3 1 #"b"
0 0 28 3 1 #"]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 3 #"str"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 2 #") "
0 0 14 3 1 #"s"
0 0 28 3 1 #"]"
0 0 28 29 1 #"\n"
0 0 28 3 4 #"    "
0 0 28 29 1 #"\n"
0 0 28 3 4 #"    "
0 0 18 3 13 #"; conditional"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 3 #"ifc"
0 0 28 3 1 #" "
0 0 14 3 1 #"c"
0 0 28 3 1 #" "
0 0 14 3 1 #"t"
0 0 28 3 1 #" "
0 0 14 3 1 #"f"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ("
0 0 14 3 2 #"if"
0 0 28 3 3 #"  ("
0 0 14 3 6 #"interp"
0 0 28 3 1 #" "
0 0 14 3 1 #"c"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 11 #"          ("
0 0 14 3 6 #"interp"
0 0 28 3 1 #" "
0 0 14 3 1 #"t"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 11 #"          ("
0 0 14 3 6 #"interp"
0 0 28 3 1 #" "
0 0 14 3 1 #"f"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 3 #"))]"
0 0 28 29 1 #"\n"
0 0 28 3 4 #"    "
0 0 28 29 1 #"\n"
0 0 28 3 4 #"    "
0 0 18 3 12 #"; identifier"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 3 3 #") ("
0 0 14 3 6 #"strict"
0 0 28 3 2 #" ("
0 0 14 3 10 #"env-lookup"
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 3 #"))]"
0 0 28 29 1 #"\n"
0 0 28 3 4 #"    "
0 0 28 29 1 #"\n"
0 0 28 3 4 #"    "
0 0 18 3 43 #"; function (notice the meta interpretation)"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 3 #"fun"
0 0 28 3 1 #" "
0 0 14 3 3 #"ids"
0 0 28 3 1 #" "
0 0 14 3 4 #"body"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ("
0 0 16 3 2 #"\316\273"
0 0 28 3 2 #" ("
0 0 14 3 8 #"arg-vals"
0 0 28 3 4 #")  ("
0 0 14 3 6 #"interp"
0 0 28 3 1 #" "
0 0 14 3 4 #"body"
0 0 28 3 2 #" ("
0 0 14 3 10 #"extend-env"
0 0 28 3 1 #" "
0 0 14 3 3 #"ids"
0 0 28 3 1 #" "
0 0 14 3 8 #"arg-vals"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 4 #")))]"
0 0 28 29 1 #"\n"
0 0 28 3 4 #"    "
0 0 28 29 1 #"\n"
0 0 28 3 4 #"    "
0 0 18 3 13 #"; application"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 3 #"app"
0 0 28 3 1 #" "
0 0 14 3 8 #"fun-expr"
0 0 28 3 1 #" "
0 0 14 3 13 #"arg-expr-list"
0 0 28 3 55 #")                                                      "
0 0 18 3 7 #";\"mine\""
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ("
0 0 14 3 7 #"lazyApp"
0 0 28 3 1 #" "
0 0 14 3 8 #"fun-expr"
0 0 28 3 1 #" "
0 0 14 3 13 #"arg-expr-list"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 2 #" )"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ]"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 4 #"    "
0 0 18 3 23 #"; primitive application"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 8 #"prim-app"
0 0 28 3 1 #" "
0 0 14 3 4 #"prim"
0 0 28 3 1 #" "
0 0 14 3 13 #"arg-expr-list"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ("
0 0 14 3 5 #"apply"
0 0 28 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 28 3 2 #" ("
0 0 14 3 4 #"assq"
0 0 28 3 1 #" "
0 0 14 3 4 #"prim"
0 0 28 3 1 #" "
0 0 14 3 12 #"*primitives*"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 13 #"            ("
0 0 14 3 3 #"map"
0 0 28 3 2 #" ("
0 0 16 3 2 #"\316\273"
0 0 28 3 2 #" ("
0 0 14 3 1 #"a"
0 0 28 3 4 #")  ("
0 0 14 3 6 #"interp"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 3 #")) "
0 0 14 3 13 #"arg-expr-list"
0 0 28 3 3 #"))]"
0 0 28 29 1 #"\n"
0 0 28 3 4 #"    "
0 0 28 29 1 #"\n"
0 0 28 3 4 #"    "
0 0 18 3 19 #"; local definitions"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"lcal"
0 0 28 3 1 #" "
0 0 16 3 4 #"defs"
0 0 28 3 1 #" "
0 0 14 3 4 #"body"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ("
0 0 16 3 3 #"def"
0 0 28 3 1 #" "
0 0 14 3 7 #"new-env"
0 0 28 3 2 #" ("
0 0 14 3 10 #"extend-env"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 3 #"() "
0 0 24 3 1 #"'"
0 0 28 3 3 #"() "
0 0 14 3 3 #"env"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ("
0 0 14 3 8 #"for-each"
0 0 28 3 2 #" ("
0 0 16 3 2 #"\316\273"
0 0 28 3 2 #" ("
0 0 14 3 1 #"d"
0 0 28 3 3 #") ("
0 0 14 3 10 #"interp-def"
0 0 28 3 1 #" "
0 0 14 3 1 #"d"
0 0 28 3 1 #" "
0 0 14 3 7 #"new-env"
0 0 28 3 3 #")) "
0 0 16 3 4 #"defs"
0 0 28 3 2 #") "
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ("
0 0 14 3 6 #"interp"
0 0 28 3 1 #" "
0 0 14 3 4 #"body"
0 0 28 3 1 #" "
0 0 14 3 7 #"new-env"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ]"
0 0 28 29 1 #"\n"
0 0 28 3 4 #"    "
0 0 28 29 1 #"\n"
0 0 28 3 4 #"    "
0 0 18 3 18 #"; pattern matching"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"mtch"
0 0 28 3 1 #" "
0 0 14 3 4 #"expr"
0 0 28 3 1 #" "
0 0 16 3 5 #"cases"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ("
0 0 16 3 3 #"def"
0 0 28 3 1 #" "
0 0 14 3 13 #"value-matched"
0 0 28 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 28 3 1 #" "
0 0 14 3 4 #"expr"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ("
0 0 16 3 3 #"def"
0 0 28 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 28 3 1 #" "
0 0 14 3 5 #"alist"
0 0 28 3 1 #" "
0 0 14 3 4 #"body"
0 0 28 3 3 #") ("
0 0 14 3 24 #"find-first-matching-case"
0 0 28 3 1 #" "
0 0 14 3 13 #"value-matched"
0 0 28 3 1 #" "
0 0 16 3 5 #"cases"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ("
0 0 14 3 6 #"interp"
0 0 28 3 1 #" "
0 0 14 3 4 #"body"
0 0 28 3 2 #" ("
0 0 14 3 10 #"extend-env"
0 0 28 3 2 #" ("
0 0 14 3 3 #"map"
0 0 28 3 1 #" "
0 0 14 3 3 #"car"
0 0 28 3 1 #" "
0 0 14 3 5 #"alist"
0 0 28 3 3 #") ("
0 0 14 3 3 #"map"
0 0 28 3 1 #" "
0 0 14 3 3 #"cdr"
0 0 28 3 1 #" "
0 0 14 3 5 #"alist"
0 0 28 3 2 #") "
0 0 14 3 3 #"env"
0 0 28 3 3 #"))]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    ))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 18 #";defs todo el rato"
0 0 28 29 1 #"\n"
0 0 18 3 2 #"#;"
0 0 28 3 1 #"("
0 0 14 3 4 #"list"
0 0 28 3 2 #" ("
0 0 14 3 8 #"datatype"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 4 #"List"
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 2 #" ("
0 0 14 3 7 #"variant"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 5 #"Empty"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 3 #"())"
0 0 28 29 1 #"\n"
0 0 28 3 31 #"                              ("
0 0 14 3 7 #"variant"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 4 #"Cons"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"("
0 0 14 3 1 #"a"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 4 #"))))"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 14 3 5 #"dfine"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 6 #"length"
0 0 28 3 2 #" ("
0 0 14 3 3 #"fun"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"("
0 0 14 3 1 #"l"
0 0 28 3 3 #") ("
0 0 14 3 4 #"mtch"
0 0 28 3 2 #" ("
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #"l"
0 0 28 3 3 #") ("
0 0 14 3 4 #"list"
0 0 28 3 2 #" ("
0 0 14 3 3 #"cse"
0 0 28 3 2 #" ("
0 0 14 3 7 #"constrP"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 5 #"Empty"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 3 #"())"
0 0 28 29 1 #"\n"
0 0 28 3 59
#"                                                          ("
0 0 14 3 3 #"num"
0 0 28 3 1 #" "
0 0 24 3 1 #"0"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 54 #"                                                     ("
0 0 14 3 3 #"cse"
0 0 28 3 2 #" ("
0 0 14 3 7 #"constrP"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 4 #"Cons"
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 2 #" ("
0 0 14 3 3 #"idP"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #"a"
0 0 28 3 3 #") ("
0 0 14 3 3 #"idP"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #"b"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 59
#"                                                          ("
0 0 14 3 8 #"prim-app"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #"+"
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 2 #" ("
0 0 14 3 3 #"num"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 3 #") ("
0 0 14 3 3 #"app"
0 0 28 3 2 #" ("
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 6 #"length"
0 0 28 3 3 #") ("
0 0 14 3 4 #"list"
0 0 28 3 2 #" ("
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #"b"
0 0 28 3 11 #")))))))))))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 12 #";defs:------"
0 0 28 29 1 #"\n"
0 0 18 3 6 #";body:"
0 0 28 29 1 #"\n"
0 0 18 3 2 #"#;"
0 0 28 3 1 #"("
0 0 14 3 3 #"app"
0 0 28 3 2 #" ("
0 0 14 3 3 #"fun"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"("
0 0 14 3 1 #"x"
0 0 28 3 2 #" ("
0 0 14 3 4 #"lazy"
0 0 28 3 1 #" "
0 0 14 3 1 #"y"
0 0 28 3 4 #")) ("
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #"x"
0 0 28 3 30 #"))                            "
0 0 18 3 9 #";fun-expr"
0 0 28 29 1 #"\n"
0 0 28 3 8 #"       ("
0 0 14 3 4 #"list"
0 0 28 3 2 #" ("
0 0 14 3 3 #"num"
0 0 28 3 1 #" "
0 0 24 3 2 #"42"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 14 #"             ("
0 0 14 3 8 #"prim-app"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #"/"
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 2 #" ("
0 0 14 3 3 #"num"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 3 #") ("
0 0 14 3 3 #"num"
0 0 28 3 1 #" "
0 0 24 3 1 #"0"
0 0 28 3 7 #")))))  "
0 0 18 3 14 #";arg-expr-list"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 7 #";------"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 6 #";defs:"
0 0 28 29 1 #"\n"
0 0 18 3 2 #"#;"
0 0 28 3 1 #"("
0 0 14 3 4 #"list"
0 0 28 3 2 #" ("
0 0 14 3 8 #"datatype"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #"T"
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 2 #" ("
0 0 14 3 7 #"variant"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #"C"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 2 #"(("
0 0 14 3 4 #"lazy"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 5 #")))))"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 14 3 5 #"dfine"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #"x"
0 0 28 3 2 #" ("
0 0 14 3 3 #"app"
0 0 28 3 2 #" ("
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #"C"
0 0 28 3 3 #") ("
0 0 14 3 4 #"list"
0 0 28 3 2 #" ("
0 0 14 3 8 #"prim-app"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #"/"
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 2 #" ("
0 0 14 3 3 #"num"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 3 #") ("
0 0 14 3 3 #"num"
0 0 28 3 1 #" "
0 0 24 3 1 #"0"
0 0 28 3 7 #")))))))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 9 #";body(s):"
0 0 28 29 1 #"\n"
0 0 18 3 2 #"#;"
0 0 28 3 3 #"  ("
0 0 14 3 3 #"app"
0 0 28 3 2 #" ("
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 2 #"T?"
0 0 28 3 3 #") ("
0 0 14 3 4 #"list"
0 0 28 3 2 #" ("
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #"x"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 12 #"lazyList-def"
0 0 28 3 1 #" "
0 0 14 3 3 #"var"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 14 3 3 #"var"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"    [ ("
0 0 14 3 7 #"variant"
0 0 28 3 1 #" "
0 0 14 3 4 #"name"
0 0 28 3 1 #" "
0 0 14 3 6 #"params"
0 0 28 3 3 #") ("
0 0 14 3 2 #"if"
0 0 28 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 3 #"() "
0 0 14 3 6 #"params"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 31 #"                               "
0 0 24 3 2 #"#f"
0 0 28 29 1 #"\n"
0 0 28 3 32 #"                               ("
0 0 14 3 3 #"map"
0 0 28 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 28 3 2 #" ("
0 0 14 3 1 #"p"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 36 #"                                   ("
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 14 3 1 #"p"
0 0 28 29 1 #"\n"
0 0 28 3 39 #"                                     [("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 4 #"lazy"
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 3 2 #") "
0 0 24 3 2 #"#t"
0 0 28 3 1 #"]"
0 0 28 29 1 #"\n"
0 0 28 3 38 #"                                     ["
0 0 14 3 4 #"else"
0 0 28 3 1 #" "
0 0 24 3 2 #"#f"
0 0 28 3 4 #"])) "
0 0 14 3 6 #"params"
0 0 28 3 3 #"))]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 1 #" "
0 0 24 3 2 #"#f"
0 0 28 3 1 #"]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    )"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  )"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 14 #"deleteLazy-def"
0 0 28 3 1 #" "
0 0 14 3 6 #"idList"
0 0 28 3 41 #")                                        "
0 0 18 3 5 #";MINE"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 14 3 6 #"idList"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"cons"
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 4 #"lazy"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 2 #") "
0 0 14 3 1 #"b"
0 0 28 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 2 #" ("
0 0 14 3 14 #"deleteLazy-def"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 3 #"))]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"cons"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 2 #" ("
0 0 14 3 14 #"deleteLazy-def"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 3 #"))]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 3 #"()]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"   ))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 15 #"replaceLazy-def"
0 0 28 3 1 #" "
0 0 14 3 3 #"var"
0 0 28 3 41 #")                                        "
0 0 18 3 5 #";MINE"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 14 3 3 #"var"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"    [ ("
0 0 14 3 7 #"variant"
0 0 28 3 1 #" "
0 0 14 3 4 #"name"
0 0 28 3 1 #" "
0 0 14 3 6 #"params"
0 0 28 3 4 #")  ("
0 0 14 3 7 #"variant"
0 0 28 3 1 #" "
0 0 14 3 4 #"name"
0 0 28 3 2 #" ("
0 0 14 3 14 #"deleteLazy-def"
0 0 28 3 1 #" "
0 0 14 3 6 #"params"
0 0 28 3 4 #") )]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 1 #" "
0 0 14 3 3 #"var"
0 0 28 3 2 #"] "
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    )"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  )"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 1 #"("
0 0 14 3 14 #"env-lookup-def"
0 0 28 3 1 #" "
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 13 #";(println id)"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 5 #"mtEnv"
0 0 28 3 2 #") "
0 0 24 3 2 #"#f"
0 0 28 3 1 #"]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"aEnv"
0 0 28 3 1 #" "
0 0 14 3 8 #"bindings"
0 0 28 3 1 #" "
0 0 14 3 4 #"rest"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ("
0 0 16 3 3 #"def"
0 0 28 3 1 #" "
0 0 14 3 7 #"binding"
0 0 28 3 2 #" ("
0 0 14 3 5 #"assoc"
0 0 28 3 1 #" "
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 14 3 8 #"bindings"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 31 #";;;;;;;;;;   (println bindings)"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ("
0 0 14 3 2 #"if"
0 0 28 3 1 #" "
0 0 14 3 7 #"binding"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"         ("
0 0 14 3 3 #"cdr"
0 0 28 3 1 #" "
0 0 14 3 7 #"binding"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"         ("
0 0 14 3 14 #"env-lookup-def"
0 0 28 3 1 #" "
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 14 3 4 #"rest"
0 0 28 3 5 #"))]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 31 #"; interp-def :: Def Env -> Void"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 1 #"("
0 0 14 3 10 #"interp-def"
0 0 28 3 1 #" "
0 0 14 3 1 #"d"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 12 #";(println d)"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 14 3 1 #"d"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 5 #"dfine"
0 0 28 3 1 #" "
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 14 3 8 #"val-expr"
0 0 28 3 6 #")     "
0 0 18 3 14 #"; (println id)"
0 0 28 29 1 #"\n"
0 0 28 3 29 #"                             "
0 0 18 3 20 #"; (println val-expr)"
0 0 28 29 1 #"\n"
0 0 28 3 28 #"                            "
0 0 18 3 17 #"; ; (println env)"
0 0 28 29 1 #"\n"
0 0 28 3 29 #"                             "
0 0 18 3 36 #";; (println (env-lookup-def 'C env))"
0 0 28 29 1 #"\n"
0 0 28 3 30 #"                              "
0 0 18 3 14 #";(println  \"\")"
0 0 28 29 1 #"\n"
0 0 28 3 30 #"                              "
0 0 28 29 1 #"\n"
0 0 28 3 32 #"                               ("
0 0 14 3 11 #"update-env!"
0 0 28 3 1 #" "
0 0 14 3 2 #"id"
0 0 28 3 2 #" ("
0 0 14 3 5 #"exprV"
0 0 28 3 1 #" "
0 0 14 3 8 #"val-expr"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 2 #" ("
0 0 14 3 3 #"box"
0 0 28 3 1 #" "
0 0 24 3 2 #"#f"
0 0 28 3 3 #")) "
0 0 14 3 3 #"env"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"     "
0 0 18 3 43 #";(update-env! id (interp val-expr env) env)"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 8 #"datatype"
0 0 28 3 1 #" "
0 0 14 3 4 #"name"
0 0 28 3 1 #" "
0 0 14 3 8 #"variants"
0 0 28 3 6 #")     "
0 0 18 3 72
(
 #";; extend environment with new definitions corresponding to the data"
 #"type"
) 0 0 28 29 1 #"\n"
0 0 28 3 10 #"         ("
0 0 14 3 15 #"interp-datatype"
0 0 28 3 1 #" "
0 0 14 3 4 #"name"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"         ("
0 0 14 3 8 #"for-each"
0 0 28 3 2 #" ("
0 0 16 3 2 #"\316\273"
0 0 28 3 2 #" ("
0 0 14 3 1 #"v"
0 0 28 3 3 #") ("
0 0 14 3 14 #"interp-variant"
0 0 28 3 1 #" "
0 0 14 3 4 #"name"
0 0 28 3 1 #" "
0 0 14 3 1 #"v"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 3 #")) "
0 0 14 3 8 #"variants"
0 0 28 3 4 #")]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 39 #"; interp-datatype :: String Env -> Void"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 1 #"("
0 0 14 3 15 #"interp-datatype"
0 0 28 3 1 #" "
0 0 14 3 4 #"name"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 3 #")  "
0 0 18 3 30 #"; datatype predicate, eg. Nat?"
0 0 28 29 1 #"\n"
0 0 28 3 1 #" "
0 0 18 3 16 #"; (println name)"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 11 #"update-env!"
0 0 28 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 28 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 28 3 2 #" ("
0 0 14 3 14 #"symbol->string"
0 0 28 3 1 #" "
0 0 14 3 4 #"name"
0 0 28 3 2 #") "
0 0 20 3 3 #"\"?\""
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 16 #"               ("
0 0 16 3 2 #"\316\273"
0 0 28 3 2 #" ("
0 0 14 3 1 #"v"
0 0 28 3 3 #") ("
0 0 14 3 8 #"symbol=?"
0 0 28 3 2 #" ("
0 0 14 3 12 #"structV-name"
0 0 28 3 2 #" ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 1 #"v"
0 0 28 3 3 #")) "
0 0 14 3 4 #"name"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"               "
0 0 14 3 3 #"env"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 45 #"; interp-variant :: String String Env -> Void"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 1 #"("
0 0 14 3 14 #"interp-variant"
0 0 28 3 1 #" "
0 0 14 3 4 #"name"
0 0 28 3 1 #" "
0 0 14 3 3 #"var"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 7 #"println"
0 0 28 3 2 #"  "
0 0 14 3 3 #"var"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 1 #" "
0 0 18 3 33 #"; (println  (variant-params var))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 3 #"def"
0 0 28 3 1 #" "
0 0 14 3 8 #"nVariant"
0 0 28 3 4 #"   ("
0 0 14 3 15 #"replaceLazy-def"
0 0 28 3 1 #" "
0 0 14 3 3 #"var"
0 0 28 3 3 #") )"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 3 #"def"
0 0 28 3 1 #" "
0 0 14 3 5 #"llist"
0 0 28 3 3 #"  ("
0 0 14 3 12 #"lazyList-def"
0 0 28 3 1 #" "
0 0 14 3 3 #"var"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 5 #"print"
0 0 28 3 1 #" "
0 0 20 3 12 #"\"nVariant: \""
0 0 28 3 4 #")  ("
0 0 14 3 7 #"println"
0 0 28 3 2 #"  "
0 0 14 3 8 #"nVariant"
0 0 28 3 3 #"  )"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 5 #"print"
0 0 28 3 1 #" "
0 0 20 3 12 #"\"llist:    \""
0 0 28 3 4 #")  ("
0 0 14 3 7 #"println"
0 0 28 3 2 #"  "
0 0 14 3 5 #"llist"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 3 #"def"
0 0 28 3 1 #" "
0 0 14 3 7 #"varname"
0 0 28 3 2 #" ("
0 0 14 3 12 #"variant-name"
0 0 28 3 1 #" "
0 0 14 3 3 #"var"
0 0 28 3 4 #"))  "
0 0 18 3 41 #";; name of the variant or dataconstructor"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 5 #"print"
0 0 28 3 1 #" "
0 0 20 3 12 #"\"struct:   \""
0 0 28 3 4 #")  ("
0 0 14 3 7 #"println"
0 0 28 3 3 #"  ("
0 0 14 3 7 #"structV"
0 0 28 3 1 #" "
0 0 14 3 4 #"name"
0 0 28 3 1 #" "
0 0 14 3 7 #"varname"
0 0 28 3 1 #" "
0 0 14 3 5 #"llist"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 11 #"update-env!"
0 0 28 3 1 #" "
0 0 14 3 7 #"varname"
0 0 28 3 14 #"              "
0 0 18 3 43 #";; variant data constructor, eg. Zero, Succ"
0 0 28 29 1 #"\n"
0 0 28 3 16 #"               ("
0 0 16 3 2 #"\316\273"
0 0 28 3 2 #" ("
0 0 14 3 4 #"args"
0 0 28 3 3 #") ("
0 0 14 3 7 #"structV"
0 0 28 3 1 #" "
0 0 14 3 4 #"name"
0 0 28 3 1 #" "
0 0 14 3 7 #"varname"
0 0 28 3 1 #" "
0 0 14 3 4 #"args"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"               "
0 0 14 3 3 #"env"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 18 3 2 #"#;"
0 0 28 3 1 #"("
0 0 14 3 11 #"update-env!"
0 0 28 3 1 #" "
0 0 14 3 7 #"varname"
0 0 28 3 14 #"              "
0 0 18 3 43 #";; variant data constructor, eg. Zero, Succ"
0 0 28 29 1 #"\n"
0 0 28 3 16 #"               ("
0 0 16 3 2 #"\316\273"
0 0 28 3 2 #" ("
0 0 14 3 4 #"args"
0 0 28 3 3 #") ("
0 0 14 3 7 #"structV"
0 0 28 3 1 #" "
0 0 14 3 4 #"name"
0 0 28 3 1 #" "
0 0 14 3 7 #"varname"
0 0 28 3 1 #" "
0 0 14 3 4 #"args"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"               "
0 0 14 3 3 #"env"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 11 #"update-env!"
0 0 28 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 28 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 28 3 2 #" ("
0 0 14 3 14 #"symbol->string"
0 0 28 3 1 #" "
0 0 14 3 7 #"varname"
0 0 28 3 2 #") "
0 0 20 3 3 #"\"?\""
0 0 28 3 3 #")) "
0 0 18 3 38 #";; variant predicate, eg. Zero?, Succ?"
0 0 28 29 1 #"\n"
0 0 28 3 16 #"               ("
0 0 16 3 2 #"\316\273"
0 0 28 3 2 #" ("
0 0 14 3 1 #"v"
0 0 28 3 3 #") ("
0 0 14 3 8 #"symbol=?"
0 0 28 3 2 #" ("
0 0 14 3 15 #"structV-variant"
0 0 28 3 2 #" ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 1 #"v"
0 0 28 3 3 #")) "
0 0 14 3 7 #"varname"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"               "
0 0 14 3 3 #"env"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 4 #";;;;"
0 0 28 29 1 #"\n"
0 0 18 3 17 #"; pattern matcher"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 1 #"("
0 0 14 3 24 #"find-first-matching-case"
0 0 28 3 1 #" "
0 0 14 3 5 #"value"
0 0 28 3 1 #" "
0 0 16 3 5 #"cases"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 16 3 5 #"cases"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 28 3 2 #") "
0 0 24 3 2 #"#f"
0 0 28 3 1 #"]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"cons"
0 0 28 3 2 #" ("
0 0 14 3 3 #"cse"
0 0 28 3 1 #" "
0 0 14 3 7 #"pattern"
0 0 28 3 1 #" "
0 0 14 3 4 #"body"
0 0 28 3 2 #") "
0 0 14 3 2 #"cs"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ("
0 0 16 3 5 #"match"
0 0 28 3 2 #" ("
0 0 14 3 24 #"match-pattern-with-value"
0 0 28 3 1 #" "
0 0 14 3 7 #"pattern"
0 0 28 3 1 #" "
0 0 14 3 5 #"value"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 8 #"       ["
0 0 24 3 2 #"#f"
0 0 28 3 2 #" ("
0 0 14 3 24 #"find-first-matching-case"
0 0 28 3 1 #" "
0 0 14 3 5 #"value"
0 0 28 3 1 #" "
0 0 14 3 2 #"cs"
0 0 28 3 2 #")]"
0 0 28 29 1 #"\n"
0 0 28 3 8 #"       ["
0 0 14 3 5 #"alist"
0 0 28 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 28 3 1 #" "
0 0 14 3 5 #"alist"
0 0 28 3 1 #" "
0 0 14 3 4 #"body"
0 0 28 3 6 #")])]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 1 #"("
0 0 14 3 24 #"match-pattern-with-value"
0 0 28 3 1 #" "
0 0 14 3 7 #"pattern"
0 0 28 3 1 #" "
0 0 14 3 5 #"value"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 12 #"match/values"
0 0 28 3 2 #" ("
0 0 14 3 6 #"values"
0 0 28 3 1 #" "
0 0 14 3 7 #"pattern"
0 0 28 3 1 #" "
0 0 14 3 5 #"value"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 19 #"                [(("
0 0 14 3 3 #"idP"
0 0 28 3 1 #" "
0 0 14 3 1 #"i"
0 0 28 3 2 #") "
0 0 14 3 1 #"v"
0 0 28 3 3 #") ("
0 0 14 3 4 #"list"
0 0 28 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 28 3 1 #" "
0 0 14 3 1 #"i"
0 0 28 3 1 #" "
0 0 14 3 1 #"v"
0 0 28 3 3 #"))]"
0 0 28 29 1 #"\n"
0 0 28 3 19 #"                [(("
0 0 14 3 4 #"litP"
0 0 28 3 2 #" ("
0 0 14 3 4 #"bool"
0 0 28 3 1 #" "
0 0 14 3 1 #"v"
0 0 28 3 3 #")) "
0 0 14 3 1 #"b"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 18 #"                 ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 28 3 1 #" "
0 0 14 3 1 #"v"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 3 #") ("
0 0 14 3 4 #"list"
0 0 28 3 2 #") "
0 0 24 3 2 #"#f"
0 0 28 3 2 #")]"
0 0 28 29 1 #"\n"
0 0 28 3 19 #"                [(("
0 0 14 3 4 #"litP"
0 0 28 3 2 #" ("
0 0 14 3 3 #"num"
0 0 28 3 1 #" "
0 0 14 3 1 #"v"
0 0 28 3 3 #")) "
0 0 14 3 1 #"n"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 18 #"                 ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 28 3 1 #" "
0 0 14 3 1 #"v"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 3 #") ("
0 0 14 3 4 #"list"
0 0 28 3 2 #") "
0 0 24 3 2 #"#f"
0 0 28 3 2 #")]"
0 0 28 29 1 #"\n"
0 0 28 3 19 #"                [(("
0 0 14 3 7 #"constrP"
0 0 28 3 1 #" "
0 0 14 3 3 #"ctr"
0 0 28 3 1 #" "
0 0 14 3 8 #"patterns"
0 0 28 3 3 #") ("
0 0 14 3 7 #"structV"
0 0 28 3 1 #" "
0 0 14 3 1 #"_"
0 0 28 3 1 #" "
0 0 14 3 8 #"ctr-name"
0 0 28 3 1 #" "
0 0 14 3 10 #"str-values"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 18 #"                 ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 8 #"symbol=?"
0 0 28 3 1 #" "
0 0 14 3 3 #"ctr"
0 0 28 3 1 #" "
0 0 14 3 8 #"ctr-name"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 22 #"                     ("
0 0 14 3 5 #"apply"
0 0 28 3 1 #" "
0 0 14 3 6 #"append"
0 0 28 3 2 #" ("
0 0 14 3 3 #"map"
0 0 28 3 1 #" "
0 0 14 3 24 #"match-pattern-with-value"
0 0 28 29 1 #"\n"
0 0 28 3 40 #"                                        "
0 0 14 3 8 #"patterns"
0 0 28 3 1 #" "
0 0 14 3 10 #"str-values"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 21 #"                     "
0 0 24 3 2 #"#f"
0 0 28 3 2 #")]"
0 0 28 29 1 #"\n"
0 0 28 3 18 #"                [("
0 0 14 3 1 #"x"
0 0 28 3 1 #" "
0 0 14 3 1 #"y"
0 0 28 3 3 #") ("
0 0 14 3 5 #"error"
0 0 28 3 1 #" "
0 0 20 3 15 #"\"Match failure\""
0 0 28 3 4 #")]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 106
(
 #";; run :: s-expr -> number                                          "
 #"                               my shit"
) 0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 1 #"("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 14 3 4 #"prog"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 4 #"    "
0 0 18 3 84
(
 #";(println (interp (lcal (list List+ length+ ) (lazyParse(parse prog)"
 #"))   empty-env))"
) 0 0 28 29 1 #"\n"
0 0 28 3 4 #"    "
0 0 18 3 81
(
 #";(pretty-printing (interp (lcal (list List+ length+ ) (parse prog)) "
 #"  empty-env))"
) 0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 14 3 15 #"pretty-printing"
0 0 28 3 2 #" ("
0 0 14 3 6 #"strict"
0 0 28 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 28 3 3 #"  ("
0 0 14 3 4 #"lcal"
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 14 3 5 #"List+"
0 0 28 3 1 #" "
0 0 14 3 7 #"length+"
0 0 28 3 4 #" ) ("
0 0 14 3 5 #"parse"
0 0 28 3 1 #" "
0 0 14 3 4 #"prog"
0 0 28 3 5 #"))   "
0 0 14 3 9 #"empty-env"
0 0 28 3 4 #") ))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  )"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 31 #"#|-----------------------------"
0 0 18 29 1 #"\n"
0 0 18 3 30 #"Environment abstract data type"
0 0 18 29 1 #"\n"
0 0 18 3 9 #"empty-env"
0 0 18 3 9 #"   :: Env"
0 0 18 29 1 #"\n"
0 0 18 3 30 #"env-lookup  :: Sym Env -> Val "
0 0 18 29 1 #"\n"
0 0 18 3 45 #"extend-env  :: List[Sym] List[Val] Env -> Env"
0 0 18 29 1 #"\n"
0 0 18 3 34 #"update-env! :: Sym Val Env -> Void"
0 0 18 29 1 #"\n"
0 0 18 3 2 #"|#"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 7 #"deftype"
0 0 28 3 1 #" "
0 0 14 3 3 #"Env"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 5 #"mtEnv"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 4 #"aEnv"
0 0 28 3 1 #" "
0 0 14 3 8 #"bindings"
0 0 28 3 1 #" "
0 0 14 3 4 #"rest"
0 0 28 3 3 #")) "
0 0 18 3 40 #"; bindings is a list of pairs (id . val)"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 3 #"def"
0 0 28 3 1 #" "
0 0 14 3 9 #"empty-env"
0 0 28 3 3 #"  ("
0 0 14 3 5 #"mtEnv"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 1 #"("
0 0 14 3 10 #"env-lookup"
0 0 28 3 1 #" "
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 13 #";(println id)"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 5 #"mtEnv"
0 0 28 3 3 #") ("
0 0 14 3 5 #"error"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 10 #"env-lookup"
0 0 28 3 1 #" "
0 0 20 3 31 #"\"no binding for identifier: ~a\""
0 0 28 3 1 #" "
0 0 14 3 2 #"id"
0 0 28 3 2 #")]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"aEnv"
0 0 28 3 1 #" "
0 0 14 3 8 #"bindings"
0 0 28 3 1 #" "
0 0 14 3 4 #"rest"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ("
0 0 16 3 3 #"def"
0 0 28 3 1 #" "
0 0 14 3 7 #"binding"
0 0 28 3 2 #" ("
0 0 14 3 5 #"assoc"
0 0 28 3 1 #" "
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 14 3 8 #"bindings"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 31 #";;;;;;;;;;   (println bindings)"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ("
0 0 14 3 2 #"if"
0 0 28 3 1 #" "
0 0 14 3 7 #"binding"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"         ("
0 0 14 3 3 #"cdr"
0 0 28 3 1 #" "
0 0 14 3 7 #"binding"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"         ("
0 0 14 3 10 #"env-lookup"
0 0 28 3 1 #" "
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 14 3 4 #"rest"
0 0 28 3 5 #"))]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 10 #"extend-env"
0 0 28 3 1 #" "
0 0 14 3 3 #"ids"
0 0 28 3 1 #" "
0 0 14 3 4 #"vals"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 4 #"aEnv"
0 0 28 3 2 #" ("
0 0 14 3 3 #"map"
0 0 28 3 1 #" "
0 0 14 3 4 #"cons"
0 0 28 3 1 #" "
0 0 14 3 3 #"ids"
0 0 28 3 1 #" "
0 0 14 3 4 #"vals"
0 0 28 3 2 #") "
0 0 18 3 37 #"; zip to get list of pairs (id . val)"
0 0 28 29 1 #"\n"
0 0 28 3 8 #"        "
0 0 14 3 3 #"env"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 64
#";; imperative update of env, adding/overring the binding for id."
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 1 #"("
0 0 14 3 11 #"update-env!"
0 0 28 3 1 #" "
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 14 3 3 #"val"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 18 #"set-aEnv-bindings!"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 28 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 28 3 1 #" "
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 14 3 3 #"val"
0 0 28 3 3 #") ("
0 0 14 3 13 #"aEnv-bindings"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 4 #"))))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 7 #";;;;;;;"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 14 #";;; primitives"
0 0 28 29 1 #"\n"
0 0 18 3 38 #"; http://pleiad.cl/teaching/primitivas"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 12 #"*primitives*"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 24 3 1 #"`"
0 0 28 3 2 #"(("
0 0 14 3 1 #"+"
0 0 28 3 7 #"       "
0 0 32 3 1 #","
0 0 28 3 1 #"("
0 0 16 3 6 #"lambda"
0 0 28 3 1 #" "
0 0 14 3 4 #"args"
0 0 28 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 28 3 1 #" "
0 0 14 3 1 #"+"
0 0 28 3 1 #" "
0 0 14 3 4 #"args"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 14 3 1 #"-"
0 0 28 3 7 #"       "
0 0 32 3 1 #","
0 0 28 3 1 #"("
0 0 16 3 6 #"lambda"
0 0 28 3 1 #" "
0 0 14 3 4 #"args"
0 0 28 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 28 3 1 #" "
0 0 14 3 1 #"-"
0 0 28 3 1 #" "
0 0 14 3 4 #"args"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 14 3 1 #"*"
0 0 28 3 7 #"       "
0 0 32 3 1 #","
0 0 28 3 1 #"("
0 0 16 3 6 #"lambda"
0 0 28 3 1 #" "
0 0 14 3 4 #"args"
0 0 28 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 28 3 1 #" "
0 0 14 3 1 #"*"
0 0 28 3 1 #" "
0 0 14 3 4 #"args"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 14 3 1 #"%"
0 0 28 3 7 #"       "
0 0 32 3 1 #","
0 0 28 3 1 #"("
0 0 16 3 6 #"lambda"
0 0 28 3 1 #" "
0 0 14 3 4 #"args"
0 0 28 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 28 3 1 #" "
0 0 14 3 6 #"modulo"
0 0 28 3 1 #" "
0 0 14 3 4 #"args"
0 0 28 3 16 #")))             "
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 14 3 4 #"odd?"
0 0 28 3 4 #"    "
0 0 32 3 1 #","
0 0 28 3 1 #"("
0 0 16 3 6 #"lambda"
0 0 28 3 1 #" "
0 0 14 3 4 #"args"
0 0 28 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 28 3 1 #" "
0 0 14 3 4 #"odd?"
0 0 28 3 1 #" "
0 0 14 3 4 #"args"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 14 3 5 #"even?"
0 0 28 3 3 #"   "
0 0 32 3 1 #","
0 0 28 3 1 #"("
0 0 16 3 6 #"lambda"
0 0 28 3 1 #" "
0 0 14 3 4 #"args"
0 0 28 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 28 3 1 #" "
0 0 14 3 5 #"even?"
0 0 28 3 1 #" "
0 0 14 3 4 #"args"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 14 3 1 #"/"
0 0 28 3 7 #"       "
0 0 32 3 1 #","
0 0 28 3 1 #"("
0 0 16 3 6 #"lambda"
0 0 28 3 1 #" "
0 0 14 3 4 #"args"
0 0 28 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 28 3 1 #" "
0 0 14 3 1 #"/"
0 0 28 3 1 #" "
0 0 14 3 4 #"args"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 14 3 1 #"="
0 0 28 3 7 #"       "
0 0 32 3 1 #","
0 0 28 3 1 #"("
0 0 16 3 6 #"lambda"
0 0 28 3 1 #" "
0 0 14 3 4 #"args"
0 0 28 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 28 3 1 #" "
0 0 14 3 1 #"="
0 0 28 3 1 #" "
0 0 14 3 4 #"args"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 14 3 1 #"<"
0 0 28 3 7 #"       "
0 0 32 3 1 #","
0 0 28 3 1 #"("
0 0 16 3 6 #"lambda"
0 0 28 3 1 #" "
0 0 14 3 4 #"args"
0 0 28 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 28 3 1 #" "
0 0 14 3 1 #"<"
0 0 28 3 1 #" "
0 0 14 3 4 #"args"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 14 3 2 #"<="
0 0 28 3 6 #"      "
0 0 32 3 1 #","
0 0 28 3 1 #"("
0 0 16 3 6 #"lambda"
0 0 28 3 1 #" "
0 0 14 3 4 #"args"
0 0 28 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 28 3 1 #" "
0 0 14 3 2 #"<="
0 0 28 3 1 #" "
0 0 14 3 4 #"args"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 14 3 1 #">"
0 0 28 3 7 #"       "
0 0 32 3 1 #","
0 0 28 3 1 #"("
0 0 16 3 6 #"lambda"
0 0 28 3 1 #" "
0 0 14 3 4 #"args"
0 0 28 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 28 3 1 #" "
0 0 14 3 1 #">"
0 0 28 3 1 #" "
0 0 14 3 4 #"args"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 14 3 2 #">="
0 0 28 3 6 #"      "
0 0 32 3 1 #","
0 0 28 3 1 #"("
0 0 16 3 6 #"lambda"
0 0 28 3 1 #" "
0 0 14 3 4 #"args"
0 0 28 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 28 3 1 #" "
0 0 14 3 2 #">="
0 0 28 3 1 #" "
0 0 14 3 4 #"args"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 14 3 5 #"zero?"
0 0 28 3 3 #"   "
0 0 32 3 1 #","
0 0 28 3 1 #"("
0 0 16 3 6 #"lambda"
0 0 28 3 1 #" "
0 0 14 3 4 #"args"
0 0 28 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 28 3 1 #" "
0 0 14 3 5 #"zero?"
0 0 28 3 1 #" "
0 0 14 3 4 #"args"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 14 3 3 #"not"
0 0 28 3 5 #"     "
0 0 32 3 1 #","
0 0 28 3 1 #"("
0 0 16 3 6 #"lambda"
0 0 28 3 1 #" "
0 0 14 3 4 #"args"
0 0 28 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 28 3 1 #" "
0 0 14 3 3 #"not"
0 0 28 3 1 #" "
0 0 14 3 4 #"args"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 14 3 3 #"and"
0 0 28 3 5 #"     "
0 0 32 3 1 #","
0 0 28 3 1 #"("
0 0 16 3 6 #"lambda"
0 0 28 3 1 #" "
0 0 14 3 4 #"args"
0 0 28 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 28 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 28 3 2 #" ("
0 0 14 3 1 #"x"
0 0 28 3 1 #" "
0 0 14 3 1 #"y"
0 0 28 3 3 #") ("
0 0 14 3 3 #"and"
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 3 1 #" "
0 0 14 3 1 #"y"
0 0 28 3 3 #")) "
0 0 14 3 4 #"args"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 14 3 2 #"or"
0 0 28 3 6 #"      "
0 0 32 3 1 #","
0 0 28 3 1 #"("
0 0 16 3 6 #"lambda"
0 0 28 3 1 #" "
0 0 14 3 4 #"args"
0 0 28 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 28 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 28 3 2 #" ("
0 0 14 3 1 #"x"
0 0 28 3 1 #" "
0 0 14 3 1 #"y"
0 0 28 3 3 #") ("
0 0 14 3 2 #"or"
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 3 1 #" "
0 0 14 3 1 #"y"
0 0 28 3 3 #")) "
0 0 14 3 4 #"args"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    ))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 110
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;   MYSHIT ;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;                     my shit"
) 0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 5 #"List+"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 8 #"datatype"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 4 #"List"
0 0 28 29 1 #"\n"
0 0 28 3 13 #"            ("
0 0 14 3 4 #"list"
0 0 28 3 2 #" ("
0 0 14 3 7 #"variant"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 5 #"Empty"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 3 #"())"
0 0 28 29 1 #"\n"
0 0 28 3 19 #"                  ("
0 0 14 3 7 #"variant"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 4 #"Cons"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"("
0 0 14 3 1 #"a"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 6 #")))) )"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 7 #"length+"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 5 #"dfine"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 6 #"length"
0 0 28 3 2 #" ("
0 0 14 3 3 #"fun"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"("
0 0 14 3 1 #"l"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 23 #"                      ("
0 0 14 3 4 #"mtch"
0 0 28 3 2 #" ("
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #"l"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 29 #"                            ("
0 0 14 3 4 #"list"
0 0 28 29 1 #"\n"
0 0 28 3 30 #"                             ("
0 0 14 3 3 #"cse"
0 0 28 3 2 #" ("
0 0 14 3 7 #"constrP"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 5 #"Empty"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 3 #"())"
0 0 28 29 1 #"\n"
0 0 28 3 35 #"                                  ("
0 0 14 3 3 #"num"
0 0 28 3 1 #" "
0 0 24 3 1 #"0"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 30 #"                             ("
0 0 14 3 3 #"cse"
0 0 28 3 2 #" ("
0 0 14 3 7 #"constrP"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 4 #"Cons"
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 2 #" ("
0 0 14 3 3 #"idP"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #"a"
0 0 28 3 3 #") ("
0 0 14 3 3 #"idP"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #"b"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 35 #"                                  ("
0 0 14 3 8 #"prim-app"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #"+"
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 2 #" ("
0 0 14 3 3 #"num"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 3 #") ("
0 0 14 3 3 #"app"
0 0 28 3 2 #" ("
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 6 #"length"
0 0 28 3 3 #") ("
0 0 14 3 4 #"list"
0 0 28 3 2 #" ("
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #"b"
0 0 28 3 6 #") ))))"
0 0 28 29 1 #"\n"
0 0 28 3 40 #"                                  ))))))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 10 #"SugarList+"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 5 #"dfine"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 4 #"list"
0 0 28 3 2 #" ("
0 0 14 3 3 #"fun"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"("
0 0 14 3 1 #"l"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 23 #"                      ("
0 0 14 3 4 #"mtch"
0 0 28 3 2 #" ("
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #"l"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 29 #"                            ("
0 0 14 3 4 #"list"
0 0 28 29 1 #"\n"
0 0 28 3 30 #"                             ("
0 0 14 3 3 #"cse"
0 0 28 3 2 #" ("
0 0 14 3 7 #"constrP"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 5 #"Empty"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 3 #"())"
0 0 28 29 1 #"\n"
0 0 28 3 35 #"                                  ("
0 0 14 3 3 #"num"
0 0 28 3 1 #" "
0 0 24 3 1 #"0"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 30 #"                             ("
0 0 14 3 3 #"cse"
0 0 28 3 2 #" ("
0 0 14 3 7 #"constrP"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 4 #"Cons"
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 2 #" ("
0 0 14 3 3 #"idP"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #"a"
0 0 28 3 3 #") ("
0 0 14 3 3 #"idP"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #"b"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 35 #"                                  ("
0 0 14 3 8 #"prim-app"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #"+"
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 2 #" ("
0 0 14 3 3 #"num"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 3 #") ("
0 0 14 3 3 #"app"
0 0 28 3 2 #" ("
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 6 #"length"
0 0 28 3 3 #") ("
0 0 14 3 4 #"list"
0 0 28 3 2 #" ("
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #"b"
0 0 28 3 6 #") ))))"
0 0 28 29 1 #"\n"
0 0 28 3 40 #"                                  ))))))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 3 #";;-"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 9 #"concatStr"
0 0 28 3 1 #" "
0 0 14 3 5 #"listr"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 14 3 5 #"listr"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"cons"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 28 3 2 #" ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 36 #"                                   ("
0 0 14 3 14 #"number->string"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 35 #"                                   "
0 0 14 3 1 #"a"
0 0 28 3 33 #")                                "
0 0 28 29 1 #"\n"
0 0 28 3 32 #"                               ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 28 3 1 #" "
0 0 20 3 2 #"\"\""
0 0 28 3 2 #" ("
0 0 14 3 9 #"concatStr"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 35 #"                                   "
0 0 20 3 2 #"\"\""
0 0 28 29 1 #"\n"
0 0 28 3 36 #"                                   ("
0 0 14 3 13 #"string-append"
0 0 28 3 1 #" "
0 0 20 3 3 #"\" \""
0 0 28 3 2 #" ("
0 0 14 3 9 #"concatStr"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 41 #"                                   ) )  ]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 2 #" ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 28 3 1 #" "
0 0 14 3 5 #"listr"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 14 #"              "
0 0 14 3 5 #"listr"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 7 #"symbol?"
0 0 28 3 1 #" "
0 0 14 3 5 #"listr"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 19 #"                  ("
0 0 14 3 14 #"symbol->string"
0 0 28 3 1 #" "
0 0 14 3 5 #"listr"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 19 #"                  ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 28 3 1 #" "
0 0 14 3 5 #"listr"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 23 #"                      ("
0 0 14 3 14 #"number->string"
0 0 28 3 1 #" "
0 0 14 3 5 #"listr"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 22 #"                      "
0 0 20 3 2 #"\"\""
0 0 28 3 25 #"                     )))]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    ))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 31 #"; (structV name variant values)"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 15 #"pretty-printing"
0 0 28 3 1 #" "
0 0 14 3 4 #"expr"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 3 #"let"
0 0 28 3 3 #" (["
0 0 14 3 10 #"listedExpr"
0 0 28 3 2 #" ("
0 0 14 3 11 #"pretty-list"
0 0 28 3 1 #" "
0 0 14 3 4 #"expr"
0 0 28 3 3 #")])"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 14 3 10 #"listedExpr"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 7 #"structV"
0 0 28 3 1 #" "
0 0 14 3 4 #"name"
0 0 28 3 1 #" "
0 0 14 3 7 #"variant"
0 0 28 3 1 #" "
0 0 14 3 6 #"values"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 6 #"values"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"         ("
0 0 14 3 13 #"string-append"
0 0 28 3 1 #" "
0 0 20 3 3 #"\"{\""
0 0 28 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 28 3 2 #" ("
0 0 14 3 14 #"symbol->string"
0 0 28 3 2 #" ("
0 0 14 3 15 #"structV-variant"
0 0 28 3 1 #" "
0 0 14 3 10 #"listedExpr"
0 0 28 3 3 #")) "
0 0 20 3 3 #"\"}\""
0 0 28 3 3 #" ))"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"         ("
0 0 14 3 13 #"string-append"
0 0 28 3 1 #" "
0 0 20 3 3 #"\"{\""
0 0 28 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 28 3 2 #" ("
0 0 14 3 14 #"symbol->string"
0 0 28 3 2 #" ("
0 0 14 3 15 #"structV-variant"
0 0 28 3 1 #" "
0 0 14 3 10 #"listedExpr"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 44 #"                                           ("
0 0 14 3 13 #"string-append"
0 0 28 3 1 #" "
0 0 20 3 3 #"\" \""
0 0 28 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 28 29 1 #"\n"
0 0 28 3 64
#"                                                               ("
0 0 14 3 9 #"concatStr"
0 0 28 3 2 #" ("
0 0 14 3 3 #"map"
0 0 28 3 1 #" "
0 0 14 3 15 #"pretty-printing"
0 0 28 3 1 #" "
0 0 14 3 6 #"values"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 63
#"                                                               "
0 0 20 3 3 #"\"}\""
0 0 28 3 8 #")) )) )]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 1 #" "
0 0 14 3 10 #"listedExpr"
0 0 28 3 1 #"]"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"    )   )"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  )"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 11 #"pretty-list"
0 0 28 3 1 #" "
0 0 14 3 4 #"expr"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 14 3 4 #"expr"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 7 #"structV"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 4 #"List"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 4 #"Cons"
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 4 #")) ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 6 #"isList"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 43 #"                                          ("
0 0 14 3 7 #"structV"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 4 #"List"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 4 #"list"
0 0 28 3 2 #" ("
0 0 14 3 7 #"getList"
0 0 28 3 1 #" "
0 0 14 3 4 #"expr"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 43 #"                                          ("
0 0 14 3 7 #"structV"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 4 #"List"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 4 #"Cons"
0 0 28 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 28 3 2 #" ("
0 0 14 3 11 #"pretty-list"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 3 #") ("
0 0 14 3 11 #"pretty-list"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 49 #"                                          )     ]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 1 #" "
0 0 14 3 4 #"expr"
0 0 28 3 2 #"])"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  )"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 6 #"isList"
0 0 28 3 1 #" "
0 0 14 3 4 #"cons"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 14 3 4 #"cons"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 7 #"structV"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 4 #"List"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 5 #"Empty"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 4 #"()) "
0 0 24 3 2 #"#t"
0 0 28 3 1 #"]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 7 #"structV"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 4 #"List"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 4 #"Cons"
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 5 #"))  ("
0 0 14 3 6 #"isList"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 2 #")]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 1 #" "
0 0 24 3 2 #"#f"
0 0 28 3 1 #"]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    ))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 7 #"getList"
0 0 28 3 1 #" "
0 0 14 3 3 #"lst"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 14 3 3 #"lst"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 7 #"structV"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 4 #"List"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 5 #"Empty"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 4 #"()) "
0 0 24 3 1 #"'"
0 0 28 3 3 #"()]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 7 #"structV"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 4 #"List"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 4 #"Cons"
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 5 #"))  ("
0 0 14 3 4 #"cons"
0 0 28 3 2 #" ("
0 0 14 3 11 #"pretty-list"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 3 #") ("
0 0 14 3 7 #"getList"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 3 #"))]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"   ))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 83
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;   MYTESTS ;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;"
) 0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 17 #"print-only-errors"
0 0 28 3 1 #" "
0 0 24 3 2 #"#t"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 5 #"parse"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"{"
0 0 16 3 5 #"local"
0 0 28 3 3 #" {{"
0 0 14 3 8 #"datatype"
0 0 28 3 1 #" "
0 0 14 3 1 #"T"
0 0 28 3 1 #" "
0 0 28 29 1 #"\n"
0 0 28 3 31 #"                              {"
0 0 14 3 1 #"C"
0 0 28 3 2 #" {"
0 0 14 3 4 #"lazy"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 3 #"}}}"
0 0 28 29 1 #"\n"
0 0 28 3 21 #"                    {"
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 3 2 #" {"
0 0 14 3 1 #"C"
0 0 28 3 2 #" {"
0 0 14 3 1 #"/"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 1 #" "
0 0 24 3 1 #"0"
0 0 28 3 4 #"}}}}"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              {"
0 0 14 3 2 #"T?"
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 3 3 #"}})"
0 0 28 29 1 #"\n"
0 0 18 3 2 #";;"
0 0 28 29 1 #"\n"
0 0 18 3 2 #"#;"
0 0 28 3 1 #"("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"{"
0 0 16 3 5 #"local"
0 0 28 3 3 #" {{"
0 0 14 3 8 #"datatype"
0 0 28 3 1 #" "
0 0 14 3 1 #"T"
0 0 28 3 1 #" "
0 0 28 29 1 #"\n"
0 0 28 3 31 #"                              {"
0 0 14 3 1 #"C"
0 0 28 3 2 #" {"
0 0 14 3 4 #"lazy"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 3 #"}}}"
0 0 28 29 1 #"\n"
0 0 28 3 21 #"                    {"
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 3 2 #" {"
0 0 14 3 1 #"C"
0 0 28 3 2 #" {"
0 0 14 3 1 #"/"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 1 #" "
0 0 24 3 1 #"0"
0 0 28 3 4 #"}}}}"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              {"
0 0 14 3 2 #"T?"
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 3 3 #"}})"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"     "
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 4 #"test"
0 0 28 3 2 #" ("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"{"
0 0 16 3 5 #"local"
0 0 28 3 3 #" {{"
0 0 14 3 8 #"datatype"
0 0 28 3 1 #" "
0 0 14 3 1 #"T"
0 0 28 3 1 #" "
0 0 28 29 1 #"\n"
0 0 28 3 31 #"                              {"
0 0 14 3 1 #"C"
0 0 28 3 2 #" {"
0 0 14 3 4 #"lazy"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 3 #"}}}"
0 0 28 29 1 #"\n"
0 0 28 3 21 #"                    {"
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 3 2 #" {"
0 0 14 3 1 #"C"
0 0 28 3 2 #" {"
0 0 14 3 1 #"/"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 1 #" "
0 0 24 3 1 #"0"
0 0 28 3 4 #"}}}}"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              {"
0 0 14 3 2 #"T?"
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 3 3 #"}})"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"      "
0 0 24 3 2 #"#t"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 4 #"test"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"{"
0 0 16 3 5 #"local"
0 0 28 3 3 #" {{"
0 0 14 3 8 #"datatype"
0 0 28 3 1 #" "
0 0 14 3 1 #"T"
0 0 28 3 1 #" "
0 0 28 29 1 #"\n"
0 0 28 3 19 #"                  {"
0 0 14 3 1 #"C"
0 0 28 3 2 #" {"
0 0 14 3 4 #"lazy"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 3 #"}}}"
0 0 28 29 1 #"\n"
0 0 28 3 17 #"                {"
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 3 2 #" {"
0 0 14 3 1 #"C"
0 0 28 3 2 #" {"
0 0 14 3 1 #"+"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 1 #" "
0 0 24 3 1 #"0"
0 0 28 3 3 #"}}}"
0 0 28 29 1 #"\n"
0 0 28 3 17 #"                {"
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 1 #"y"
0 0 28 3 2 #" {"
0 0 14 3 1 #"C"
0 0 28 3 2 #" {"
0 0 14 3 1 #"/"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 1 #" "
0 0 24 3 1 #"0"
0 0 28 3 4 #"}}}}"
0 0 28 29 1 #"\n"
0 0 28 3 11 #"          {"
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 29 1 #"\n"
0 0 28 3 13 #"            {"
0 0 16 3 4 #"case"
0 0 28 3 2 #" {"
0 0 14 3 1 #"C"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 2 #"} "
0 0 14 3 2 #"=>"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 4 #"}}})"
0 0 28 29 1 #"\n"
0 0 24 3 1 #"1"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 34 #";(run '{{fun {x y} x} 42 {/ 1 0}})"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 2 #"#;"
0 0 28 3 1 #"("
0 0 14 3 4 #"test"
0 0 28 29 1 #"\n"
0 0 28 3 4 #"   ("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"{"
0 0 16 3 5 #"local"
0 0 28 3 3 #" {{"
0 0 14 3 8 #"datatype"
0 0 28 3 1 #" "
0 0 14 3 5 #"Cache"
0 0 28 3 1 #" "
0 0 28 29 1 #"\n"
0 0 28 3 28 #"                           {"
0 0 14 3 5 #"Empty"
0 0 28 3 2 #"} "
0 0 28 29 1 #"\n"
0 0 28 3 28 #"                           {"
0 0 14 3 4 #"Cons"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 2 #"}}"
0 0 28 29 1 #"\n"
0 0 28 3 18 #"                 {"
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 6 #"length"
0 0 28 3 2 #" {"
0 0 14 3 3 #"fun"
0 0 28 3 2 #" {"
0 0 14 3 1 #"l"
0 0 28 3 2 #"} "
0 0 28 29 1 #"\n"
0 0 28 3 36 #"                                   {"
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 14 3 1 #"l"
0 0 28 29 1 #"\n"
0 0 28 3 38 #"                                     {"
0 0 16 3 4 #"case"
0 0 28 3 2 #" {"
0 0 14 3 5 #"Empty"
0 0 28 3 2 #"} "
0 0 14 3 2 #"=>"
0 0 28 3 1 #" "
0 0 24 3 1 #"0"
0 0 28 3 1 #"}"
0 0 28 29 1 #"\n"
0 0 28 3 38 #"                                     {"
0 0 16 3 4 #"case"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Cons"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 2 #"} "
0 0 14 3 2 #"=>"
0 0 28 3 2 #" {"
0 0 14 3 1 #"+"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 2 #" {"
0 0 14 3 6 #"length"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 8 #"} }}}}}}"
0 0 28 29 1 #"\n"
0 0 28 3 12 #"           {"
0 0 14 3 6 #"length"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Cons"
0 0 28 3 2 #" {"
0 0 14 3 5 #"Empty"
0 0 28 3 3 #"} {"
0 0 14 3 5 #"Empty"
0 0 28 3 5 #"}}}})"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"   "
0 0 24 3 1 #"1"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 4 #"test"
0 0 28 3 2 #" ("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 2 #"{{"
0 0 14 3 3 #"fun"
0 0 28 3 2 #" {"
0 0 14 3 1 #"x"
0 0 28 3 3 #"  {"
0 0 14 3 4 #"lazy"
0 0 28 3 1 #" "
0 0 14 3 1 #"y"
0 0 28 3 3 #"}} "
0 0 14 3 1 #"x"
0 0 28 3 2 #"} "
0 0 24 3 1 #"1"
0 0 28 3 2 #" {"
0 0 14 3 1 #"/"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 1 #" "
0 0 24 3 1 #"0"
0 0 28 3 4 #"}}) "
0 0 24 3 1 #"1"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 4 #"test"
0 0 28 3 2 #" ("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 2 #"{{"
0 0 14 3 3 #"fun"
0 0 28 3 3 #" {{"
0 0 14 3 4 #"lazy"
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 3 4 #"}  {"
0 0 14 3 4 #"lazy"
0 0 28 3 1 #" "
0 0 14 3 1 #"y"
0 0 28 3 3 #"}} "
0 0 14 3 1 #"x"
0 0 28 3 2 #"} "
0 0 24 3 1 #"1"
0 0 28 3 2 #" {"
0 0 14 3 1 #"/"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 1 #" "
0 0 24 3 1 #"0"
0 0 28 3 4 #"}}) "
0 0 24 3 1 #"1"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 7 #"println"
0 0 28 3 1 #" "
0 0 20 3 15 #"\"-----fail----\""
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 28 3 2 #" ("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 2 #"{{"
0 0 14 3 3 #"fun"
0 0 28 3 2 #" {"
0 0 14 3 1 #"x"
0 0 28 3 2 #"  "
0 0 14 3 1 #"y"
0 0 28 3 2 #"} "
0 0 14 3 1 #"x"
0 0 28 3 2 #"} "
0 0 24 3 1 #"1"
0 0 28 3 2 #" {"
0 0 14 3 1 #"/"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 1 #" "
0 0 24 3 1 #"0"
0 0 28 3 4 #"}}) "
0 0 20 3 21 #"\"/: division by zero\""
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 28 3 2 #" ("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 2 #"{{"
0 0 14 3 3 #"fun"
0 0 28 3 2 #" {"
0 0 14 3 1 #"x"
0 0 28 3 3 #"  {"
0 0 14 3 4 #"lazy"
0 0 28 3 1 #" "
0 0 14 3 1 #"y"
0 0 28 3 3 #"}} "
0 0 14 3 1 #"y"
0 0 28 3 2 #"} "
0 0 24 3 1 #"1"
0 0 28 3 2 #" {"
0 0 14 3 1 #"/"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 1 #" "
0 0 24 3 1 #"0"
0 0 28 3 4 #"}}) "
0 0 20 3 21 #"\"/: division by zero\""
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 7 #"println"
0 0 28 3 1 #" "
0 0 20 3 15 #"\"-----fail----\""
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 7 #"println"
0 0 28 3 1 #" "
0 0 20 3 49 #"\"vVvVvVvVvVvV      TODO WeNo QL     vVvVvVvVvVvV\""
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 4 #"test"
0 0 28 3 2 #" ("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"{"
0 0 16 3 5 #"local"
0 0 28 3 3 #" {{"
0 0 14 3 8 #"datatype"
0 0 28 3 1 #" "
0 0 14 3 3 #"Nat"
0 0 28 3 1 #" "
0 0 28 29 1 #"\n"
0 0 28 3 31 #"                              {"
0 0 14 3 4 #"Zero"
0 0 28 3 2 #"} "
0 0 28 29 1 #"\n"
0 0 28 3 31 #"                              {"
0 0 14 3 4 #"Succ"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 3 #"}}}"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              {"
0 0 14 3 4 #"Succ"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Succ"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Zero"
0 0 28 3 5 #"}}}})"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"      "
0 0 20 3 22 #"\"{Succ {Succ {Zero}}}\""
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 4 #"test"
0 0 28 3 2 #" ("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"{"
0 0 16 3 5 #"local"
0 0 28 3 3 #" {{"
0 0 14 3 8 #"datatype"
0 0 28 3 1 #" "
0 0 14 3 3 #"Nat"
0 0 28 3 1 #" "
0 0 28 29 1 #"\n"
0 0 28 3 31 #"                              {"
0 0 14 3 4 #"Zero"
0 0 28 3 2 #"} "
0 0 28 29 1 #"\n"
0 0 28 3 31 #"                              {"
0 0 14 3 4 #"Succ"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 2 #"}}"
0 0 28 29 1 #"\n"
0 0 28 3 21 #"                    {"
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 4 #"pred"
0 0 28 3 2 #" {"
0 0 14 3 3 #"fun"
0 0 28 3 2 #" {"
0 0 14 3 1 #"n"
0 0 28 3 2 #"} "
0 0 28 29 1 #"\n"
0 0 28 3 39 #"                                      {"
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 29 1 #"\n"
0 0 28 3 41 #"                                        {"
0 0 16 3 4 #"case"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Zero"
0 0 28 3 2 #"} "
0 0 14 3 2 #"=>"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Zero"
0 0 28 3 2 #"}}"
0 0 28 29 1 #"\n"
0 0 28 3 41 #"                                        {"
0 0 16 3 4 #"case"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Succ"
0 0 28 3 1 #" "
0 0 14 3 1 #"m"
0 0 28 3 2 #"} "
0 0 14 3 2 #"=>"
0 0 28 3 1 #" "
0 0 14 3 1 #"m"
0 0 28 3 5 #"}}}}}"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              {"
0 0 14 3 4 #"pred"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Succ"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Succ"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Zero"
0 0 28 3 6 #"}}}}})"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"      "
0 0 20 3 15 #"\"{Succ {Zero}}\""
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 2 #";;"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 4 #"test"
0 0 28 3 2 #" ("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"{"
0 0 16 3 5 #"match"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Cons"
0 0 28 3 2 #" {"
0 0 14 3 1 #"+"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 2 #"} "
0 0 24 3 1 #"6"
0 0 28 3 1 #"}"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              {"
0 0 16 3 4 #"case"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Cons"
0 0 28 3 1 #" "
0 0 14 3 1 #"h"
0 0 28 3 1 #" "
0 0 14 3 1 #"r"
0 0 28 3 2 #"} "
0 0 14 3 2 #"=>"
0 0 28 3 1 #" "
0 0 14 3 1 #"h"
0 0 28 3 1 #"}"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              {"
0 0 16 3 4 #"case"
0 0 28 3 1 #" "
0 0 14 3 1 #"_"
0 0 28 3 1 #" "
0 0 14 3 2 #"=>"
0 0 28 3 1 #" "
0 0 24 3 1 #"0"
0 0 28 3 4 #"}}) "
0 0 24 3 1 #"2"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 4 #"test"
0 0 28 3 2 #" ("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"{"
0 0 16 3 5 #"match"
0 0 28 3 2 #" {"
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"2"
0 0 28 3 1 #" "
0 0 24 3 1 #"6"
0 0 28 3 1 #"}"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              {"
0 0 16 3 4 #"case"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Cons"
0 0 28 3 1 #" "
0 0 14 3 1 #"h"
0 0 28 3 1 #" "
0 0 14 3 1 #"r"
0 0 28 3 2 #"} "
0 0 14 3 2 #"=>"
0 0 28 3 1 #" "
0 0 14 3 1 #"h"
0 0 28 3 1 #"}"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              {"
0 0 16 3 4 #"case"
0 0 28 3 1 #" "
0 0 14 3 1 #"_"
0 0 28 3 1 #" "
0 0 14 3 2 #"=>"
0 0 28 3 1 #" "
0 0 24 3 1 #"0"
0 0 28 3 4 #"}}) "
0 0 24 3 1 #"2"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 4 #"test"
0 0 28 29 1 #"\n"
0 0 28 3 2 #" ("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"{"
0 0 16 3 5 #"match"
0 0 28 3 2 #" {"
0 0 14 3 4 #"list"
0 0 28 3 2 #" {"
0 0 14 3 1 #"+"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 2 #"} "
0 0 24 3 1 #"4"
0 0 28 3 1 #" "
0 0 24 3 1 #"6"
0 0 28 3 1 #"}"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"         {"
0 0 16 3 4 #"case"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Cons"
0 0 28 3 1 #" "
0 0 14 3 1 #"h"
0 0 28 3 1 #" "
0 0 14 3 1 #"r"
0 0 28 3 2 #"} "
0 0 14 3 2 #"=>"
0 0 28 3 1 #" "
0 0 14 3 1 #"h"
0 0 28 3 1 #"}"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"         {"
0 0 16 3 4 #"case"
0 0 28 3 1 #" "
0 0 14 3 1 #"_"
0 0 28 3 1 #" "
0 0 14 3 2 #"=>"
0 0 28 3 1 #" "
0 0 24 3 1 #"0"
0 0 28 3 3 #"}})"
0 0 24 3 1 #"2"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 4 #"test"
0 0 28 3 2 #" ("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"{"
0 0 16 3 5 #"local"
0 0 28 3 3 #" {{"
0 0 14 3 8 #"datatype"
0 0 28 3 1 #" "
0 0 14 3 3 #"Nat"
0 0 28 3 1 #" "
0 0 28 29 1 #"\n"
0 0 28 3 31 #"                              {"
0 0 14 3 4 #"Zero"
0 0 28 3 2 #"} "
0 0 28 29 1 #"\n"
0 0 28 3 31 #"                              {"
0 0 14 3 4 #"Succ"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 3 #"}}}"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              {"
0 0 14 3 4 #"Nat?"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Zero"
0 0 28 3 5 #"}}}) "
0 0 24 3 2 #"#t"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 4 #"test"
0 0 28 3 2 #" ("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"{"
0 0 14 3 5 #"List?"
0 0 28 3 2 #" {"
0 0 14 3 5 #"Empty"
0 0 28 3 4 #"}}) "
0 0 24 3 2 #"#t"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 4 #"test"
0 0 28 3 2 #" ("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"{"
0 0 14 3 6 #"length"
0 0 28 3 2 #" {"
0 0 14 3 5 #"Empty"
0 0 28 3 4 #"}}) "
0 0 24 3 1 #"0"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 4 #"test"
0 0 28 3 2 #" ("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"{"
0 0 14 3 6 #"length"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Cons"
0 0 28 3 2 #" {"
0 0 14 3 5 #"Empty"
0 0 28 3 3 #"} {"
0 0 14 3 5 #"Empty"
0 0 28 3 5 #"}}}) "
0 0 24 3 1 #"1"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 4 #"test"
0 0 28 3 2 #" ("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"{"
0 0 14 3 6 #"length"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Cons"
0 0 28 3 2 #" {"
0 0 14 3 5 #"Empty"
0 0 28 3 3 #"} {"
0 0 14 3 4 #"Cons"
0 0 28 3 2 #" {"
0 0 14 3 5 #"Empty"
0 0 28 3 3 #"} {"
0 0 14 3 5 #"Empty"
0 0 28 3 6 #"}}}}) "
0 0 24 3 1 #"2"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 4 #"test"
0 0 28 3 2 #" ("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"{"
0 0 16 3 5 #"local"
0 0 28 3 3 #" {{"
0 0 14 3 8 #"datatype"
0 0 28 3 1 #" "
0 0 14 3 4 #"List"
0 0 28 3 1 #" "
0 0 28 29 1 #"\n"
0 0 28 3 31 #"                              {"
0 0 14 3 5 #"Empty"
0 0 28 3 2 #"} "
0 0 28 29 1 #"\n"
0 0 28 3 31 #"                              {"
0 0 14 3 4 #"Cons"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 2 #"}}"
0 0 28 29 1 #"\n"
0 0 28 3 21 #"                    {"
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 6 #"length"
0 0 28 3 2 #" {"
0 0 14 3 3 #"fun"
0 0 28 3 2 #" {"
0 0 14 3 1 #"l"
0 0 28 3 2 #"} "
0 0 28 29 1 #"\n"
0 0 28 3 41 #"                                        {"
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 14 3 1 #"l"
0 0 28 29 1 #"\n"
0 0 28 3 43 #"                                          {"
0 0 16 3 4 #"case"
0 0 28 3 2 #" {"
0 0 14 3 5 #"Empty"
0 0 28 3 2 #"} "
0 0 14 3 2 #"=>"
0 0 28 3 1 #" "
0 0 24 3 1 #"0"
0 0 28 3 1 #"}"
0 0 28 29 1 #"\n"
0 0 28 3 43 #"                                          {"
0 0 16 3 4 #"case"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Cons"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 2 #"} "
0 0 14 3 2 #"=>"
0 0 28 3 2 #" {"
0 0 14 3 1 #"+"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 2 #" {"
0 0 14 3 6 #"length"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 8 #"} }}}}}}"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              {"
0 0 14 3 6 #"length"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Cons"
0 0 28 3 2 #" {"
0 0 14 3 5 #"Empty"
0 0 28 3 3 #"} {"
0 0 14 3 5 #"Empty"
0 0 28 3 6 #"}}}}) "
0 0 24 3 1 #"1"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 4 #"test"
0 0 28 3 2 #" ("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"{"
0 0 16 3 5 #"match"
0 0 28 3 4 #"   {"
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"2"
0 0 28 3 2 #" {"
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"4"
0 0 28 3 1 #" "
0 0 24 3 1 #"5"
0 0 28 3 2 #"} "
0 0 24 3 1 #"6"
0 0 28 3 1 #"}"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              {"
0 0 16 3 4 #"case"
0 0 28 3 2 #" {"
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 2 #" {"
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #" "
0 0 14 3 1 #"c"
0 0 28 3 2 #"} "
0 0 14 3 1 #"d"
0 0 28 3 2 #"} "
0 0 14 3 2 #"=>"
0 0 28 3 1 #" "
0 0 14 3 1 #"c"
0 0 28 3 5 #"}})  "
0 0 24 3 1 #"5"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 4 #"test"
0 0 28 3 2 #" ("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"{"
0 0 16 3 5 #"match"
0 0 28 3 4 #"   {"
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"2"
0 0 28 3 2 #" {"
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"4"
0 0 28 3 1 #" "
0 0 24 3 1 #"5"
0 0 28 3 2 #"} "
0 0 24 3 1 #"6"
0 0 28 3 1 #"}"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              {"
0 0 16 3 4 #"case"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Cons"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 2 #" ("
0 0 14 3 4 #"Cons"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Cons"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 2 #" ("
0 0 14 3 4 #"Cons"
0 0 28 3 1 #" "
0 0 14 3 1 #"c"
0 0 28 3 2 #" {"
0 0 14 3 5 #"Empty"
0 0 28 3 5 #"})} ("
0 0 14 3 4 #"Cons"
0 0 28 3 1 #" "
0 0 14 3 1 #"d"
0 0 28 3 2 #" {"
0 0 14 3 5 #"Empty"
0 0 28 3 6 #"}) )} "
0 0 14 3 2 #"=>"
0 0 28 3 1 #" "
0 0 14 3 1 #"c"
0 0 28 3 4 #"}}) "
0 0 24 3 1 #"5"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 4 #"test"
0 0 28 3 2 #" ("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"{"
0 0 16 3 5 #"match"
0 0 28 3 2 #" {"
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"2"
0 0 28 3 2 #" {"
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"4"
0 0 28 3 1 #" "
0 0 24 3 1 #"5"
0 0 28 3 2 #"} "
0 0 24 3 1 #"6"
0 0 28 3 1 #"}"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              {"
0 0 16 3 4 #"case"
0 0 28 3 2 #" {"
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 2 #" {"
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #" "
0 0 14 3 1 #"c"
0 0 28 3 2 #"} "
0 0 14 3 1 #"d"
0 0 28 3 2 #"} "
0 0 14 3 2 #"=>"
0 0 28 3 1 #" "
0 0 14 3 1 #"d"
0 0 28 3 4 #"}}) "
0 0 24 3 1 #"6"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 4 #"test"
0 0 28 3 2 #" ("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"{"
0 0 16 3 5 #"match"
0 0 28 3 2 #" {"
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"2"
0 0 28 3 1 #" "
0 0 24 3 1 #"4"
0 0 28 3 1 #" "
0 0 24 3 1 #"8"
0 0 28 3 1 #" "
0 0 24 3 2 #"16"
0 0 28 3 1 #"}"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              {"
0 0 16 3 4 #"case"
0 0 28 3 2 #" {"
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #" "
0 0 14 3 1 #"c"
0 0 28 3 1 #" "
0 0 14 3 1 #"d"
0 0 28 3 2 #"} "
0 0 14 3 2 #"=>"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 4 #"}}) "
0 0 24 3 1 #"4"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 4 #"test"
0 0 28 3 2 #" ("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"{"
0 0 16 3 5 #"match"
0 0 28 3 2 #" {"
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"2"
0 0 28 3 1 #" "
0 0 24 3 1 #"4"
0 0 28 3 1 #" "
0 0 24 3 1 #"8"
0 0 28 3 1 #" "
0 0 24 3 2 #"16"
0 0 28 3 1 #"}"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              {"
0 0 16 3 4 #"case"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Cons"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 2 #"} "
0 0 14 3 2 #"=>"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 4 #"}}) "
0 0 20 3 15 #"\"{list 4 8 16}\""
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 4 #"test"
0 0 28 3 2 #" ("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"{"
0 0 16 3 5 #"match"
0 0 28 3 2 #" {"
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"2"
0 0 28 3 1 #" "
0 0 24 3 1 #"6"
0 0 28 3 1 #"}"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              {"
0 0 16 3 4 #"case"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Cons"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Cons"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 2 #" {"
0 0 14 3 5 #"Empty"
0 0 28 3 4 #"}}} "
0 0 14 3 2 #"=>"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 4 #"}}) "
0 0 24 3 1 #"2"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 4 #"test"
0 0 28 3 2 #" ("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"{"
0 0 16 3 5 #"match"
0 0 28 3 2 #" {"
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"2"
0 0 28 3 1 #" "
0 0 24 3 1 #"6"
0 0 28 3 1 #"}"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              {"
0 0 16 3 4 #"case"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Cons"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Cons"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 2 #" {"
0 0 14 3 5 #"Empty"
0 0 28 3 4 #"}}} "
0 0 14 3 2 #"=>"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 4 #"}}) "
0 0 24 3 1 #"6"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 4 #"test"
0 0 28 3 2 #" ("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"{"
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"2"
0 0 28 3 1 #" "
0 0 24 3 1 #"4"
0 0 28 3 1 #" "
0 0 24 3 1 #"6"
0 0 28 3 2 #"})"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"      "
0 0 20 3 14 #"\"{list 2 4 6}\""
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 4 #"test"
0 0 28 3 1 #"("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"{"
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"2"
0 0 28 3 2 #" {"
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"4"
0 0 28 3 1 #" "
0 0 24 3 1 #"5"
0 0 28 3 2 #"} "
0 0 24 3 1 #"6"
0 0 28 3 2 #"})"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"     "
0 0 20 3 23 #"\"{list 2 {list 4 5} 6}\""
0 0 28 3 3 #")  "
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 4 #"test"
0 0 28 3 2 #" ("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"{"
0 0 14 3 4 #"Cons"
0 0 28 3 1 #" "
0 0 24 3 1 #"2"
0 0 28 3 2 #" ("
0 0 14 3 4 #"Cons"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Cons"
0 0 28 3 1 #" "
0 0 24 3 1 #"4"
0 0 28 3 2 #" ("
0 0 14 3 4 #"Cons"
0 0 28 3 1 #" "
0 0 24 3 1 #"5"
0 0 28 3 2 #" {"
0 0 14 3 5 #"Empty"
0 0 28 3 5 #"})} ("
0 0 14 3 4 #"Cons"
0 0 28 3 1 #" "
0 0 24 3 1 #"6"
0 0 28 3 2 #" {"
0 0 14 3 5 #"Empty"
0 0 28 3 6 #"}) )})"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"      "
0 0 20 3 23 #"\"{list 2 {list 4 5} 6}\""
0 0 28 3 4 #")   "
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 4 #"test"
0 0 28 3 2 #" ("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"{"
0 0 16 3 5 #"match"
0 0 28 3 4 #"   {"
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"2"
0 0 28 3 2 #" {"
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"4"
0 0 28 3 1 #" "
0 0 24 3 1 #"5"
0 0 28 3 2 #"} "
0 0 24 3 1 #"6"
0 0 28 3 1 #"}"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              {"
0 0 16 3 4 #"case"
0 0 28 3 2 #" {"
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #" "
0 0 14 3 1 #"c"
0 0 28 3 2 #"} "
0 0 14 3 2 #"=>"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 5 #"}})  "
0 0 20 3 12 #"\"{list 4 5}\""
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 4 #"test"
0 0 28 3 2 #" ("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"{"
0 0 16 3 5 #"match"
0 0 28 3 4 #"   {"
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"2"
0 0 28 3 2 #" {"
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"4"
0 0 28 3 1 #" "
0 0 24 3 1 #"5"
0 0 28 3 2 #"} "
0 0 24 3 1 #"6"
0 0 28 3 1 #"}"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              {"
0 0 16 3 4 #"case"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Cons"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Cons"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Cons"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #" "
0 0 14 3 1 #"c"
0 0 28 3 2 #"} "
0 0 14 3 1 #"d"
0 0 28 3 3 #"}} "
0 0 14 3 2 #"=>"
0 0 28 3 1 #" "
0 0 14 3 1 #"c"
0 0 28 3 3 #"}})"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"      "
0 0 20 3 10 #"\"{list 5}\""
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 4 #"test"
0 0 28 3 2 #" ("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"{"
0 0 16 3 5 #"local"
0 0 28 3 3 #" {{"
0 0 14 3 8 #"datatype"
0 0 28 3 1 #" "
0 0 14 3 7 #"BinTree"
0 0 28 3 1 #" "
0 0 28 29 1 #"\n"
0 0 28 3 31 #"                              {"
0 0 14 3 4 #"Leaf"
0 0 28 3 1 #" "
0 0 14 3 1 #"v"
0 0 28 3 2 #"} "
0 0 28 29 1 #"\n"
0 0 28 3 31 #"                              {"
0 0 14 3 4 #"Node"
0 0 28 3 1 #" "
0 0 14 3 1 #"v"
0 0 28 3 1 #" "
0 0 14 3 1 #"l"
0 0 28 3 1 #" "
0 0 14 3 1 #"r"
0 0 28 3 3 #"}}}"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              {"
0 0 14 3 4 #"Node"
0 0 28 3 1 #" "
0 0 24 3 2 #"10"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Leaf"
0 0 28 3 1 #" "
0 0 24 3 1 #"7"
0 0 28 3 3 #"} {"
0 0 14 3 4 #"Leaf"
0 0 28 3 1 #" "
0 0 24 3 1 #"2"
0 0 28 3 4 #"}}})"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"      "
0 0 20 3 29 #"\"{Node 10 {Leaf 7} {Leaf 2}}\""
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 4 #"test"
0 0 28 3 2 #" ("
0 0 14 3 15 #"pretty-printing"
0 0 28 3 2 #" ("
0 0 14 3 7 #"structV"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 3 #"Bin"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 3 #"Val"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"("
0 0 24 3 1 #"1"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"      "
0 0 20 3 9 #"\"{Val 1}\""
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 79
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; TESTS ;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;"
) 0 0 28 29 1 #"\n"
0 0 18 3 19 #";; Test sub-module."
0 0 28 29 1 #"\n"
0 0 18 3 58
#";; See http://blog.racket-lang.org/2012/06/submodules.html"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 63
#";this tests should never fail; these are tests for MiniScheme+ "
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 7 #"module+"
0 0 28 3 1 #" "
0 0 14 3 4 #"test"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 4 #"test"
0 0 28 3 2 #" ("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"{"
0 0 14 3 1 #"+"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 3 #"}) "
0 0 24 3 1 #"2"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 4 #"test"
0 0 28 3 2 #" ("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 2 #"{{"
0 0 14 3 3 #"fun"
0 0 28 3 2 #" {"
0 0 14 3 1 #"x"
0 0 28 3 1 #" "
0 0 14 3 1 #"y"
0 0 28 3 1 #" "
0 0 14 3 1 #"z"
0 0 28 3 3 #"} {"
0 0 14 3 1 #"+"
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 3 1 #" "
0 0 14 3 1 #"y"
0 0 28 3 1 #" "
0 0 14 3 1 #"z"
0 0 28 3 3 #"}} "
0 0 24 3 1 #"1"
0 0 28 3 1 #" "
0 0 24 3 1 #"2"
0 0 28 3 1 #" "
0 0 24 3 1 #"3"
0 0 28 3 3 #"}) "
0 0 24 3 1 #"6"
0 0 28 3 3 #")  "
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 4 #"test"
0 0 28 3 2 #" ("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"{"
0 0 14 3 1 #"<"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 1 #" "
0 0 24 3 1 #"2"
0 0 28 3 3 #"}) "
0 0 24 3 2 #"#t"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 4 #"test"
0 0 28 3 2 #" ("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"{"
0 0 16 3 5 #"local"
0 0 28 3 3 #" {{"
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 2 #"}}"
0 0 28 29 1 #"\n"
0 0 28 3 16 #"                "
0 0 14 3 1 #"x"
0 0 28 3 3 #"}) "
0 0 24 3 1 #"1"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 4 #"test"
0 0 28 3 2 #" ("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"{"
0 0 16 3 5 #"local"
0 0 28 3 3 #" {{"
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 3 1 #" "
0 0 24 3 1 #"2"
0 0 28 3 1 #"}"
0 0 28 29 1 #"\n"
0 0 28 3 23 #"                      {"
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 1 #"y"
0 0 28 3 2 #" {"
0 0 16 3 5 #"local"
0 0 28 3 3 #" {{"
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 3 #"}} "
0 0 14 3 1 #"x"
0 0 28 3 3 #"}}}"
0 0 28 29 1 #"\n"
0 0 28 3 17 #"                {"
0 0 14 3 1 #"+"
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 3 4 #"}}) "
0 0 24 3 1 #"4"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 14 #";; datatypes  "
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 4 #"test"
0 0 28 3 2 #" ("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"{"
0 0 16 3 5 #"local"
0 0 28 3 3 #" {{"
0 0 14 3 8 #"datatype"
0 0 28 3 1 #" "
0 0 14 3 4 #"List"
0 0 28 3 2 #" {"
0 0 14 3 5 #"Empty"
0 0 28 3 3 #"} {"
0 0 14 3 4 #"Cons"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 5 #"}}} {"
0 0 14 3 5 #"List?"
0 0 28 3 2 #" {"
0 0 14 3 5 #"Empty"
0 0 28 3 5 #"}}}) "
0 0 24 3 2 #"#t"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 4 #"test"
0 0 28 3 2 #" ("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"{"
0 0 16 3 5 #"local"
0 0 28 3 3 #" {{"
0 0 14 3 8 #"datatype"
0 0 28 3 1 #" "
0 0 14 3 4 #"List"
0 0 28 3 2 #" {"
0 0 14 3 5 #"Empty"
0 0 28 3 3 #"} {"
0 0 14 3 4 #"Cons"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 5 #"}}} {"
0 0 14 3 6 #"Empty?"
0 0 28 3 2 #" {"
0 0 14 3 5 #"Empty"
0 0 28 3 5 #"}}}) "
0 0 24 3 2 #"#t"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 4 #"test"
0 0 28 3 2 #" ("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"{"
0 0 16 3 5 #"local"
0 0 28 3 3 #" {{"
0 0 14 3 8 #"datatype"
0 0 28 3 1 #" "
0 0 14 3 4 #"List"
0 0 28 3 2 #" {"
0 0 14 3 5 #"Empty"
0 0 28 3 3 #"} {"
0 0 14 3 4 #"Cons"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 5 #"}}} {"
0 0 14 3 5 #"List?"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Cons"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 1 #" "
0 0 24 3 1 #"2"
0 0 28 3 5 #"}}}) "
0 0 24 3 2 #"#t"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 4 #"test"
0 0 28 3 2 #" ("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"{"
0 0 16 3 5 #"local"
0 0 28 3 3 #" {{"
0 0 14 3 8 #"datatype"
0 0 28 3 1 #" "
0 0 14 3 4 #"List"
0 0 28 3 2 #" {"
0 0 14 3 5 #"Empty"
0 0 28 3 3 #"} {"
0 0 14 3 4 #"Cons"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 5 #"}}} {"
0 0 14 3 5 #"Cons?"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Cons"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 1 #" "
0 0 24 3 1 #"2"
0 0 28 3 5 #"}}}) "
0 0 24 3 2 #"#t"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 4 #"test"
0 0 28 3 2 #" ("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"{"
0 0 16 3 5 #"local"
0 0 28 3 3 #" {{"
0 0 14 3 8 #"datatype"
0 0 28 3 1 #" "
0 0 14 3 4 #"List"
0 0 28 3 2 #" {"
0 0 14 3 5 #"Empty"
0 0 28 3 3 #"} {"
0 0 14 3 4 #"Cons"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 5 #"}}} {"
0 0 14 3 6 #"Empty?"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Cons"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 1 #" "
0 0 24 3 1 #"2"
0 0 28 3 4 #"}}})"
0 0 28 29 1 #"\n"
0 0 28 3 8 #"        "
0 0 24 3 2 #"#f"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 4 #"test"
0 0 28 3 2 #" ("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"{"
0 0 16 3 5 #"local"
0 0 28 3 3 #" {{"
0 0 14 3 8 #"datatype"
0 0 28 3 1 #" "
0 0 14 3 4 #"List"
0 0 28 3 2 #" {"
0 0 14 3 5 #"Empty"
0 0 28 3 3 #"} {"
0 0 14 3 4 #"Cons"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 5 #"}}} {"
0 0 14 3 6 #"Empty?"
0 0 28 3 2 #" {"
0 0 14 3 5 #"Empty"
0 0 28 3 5 #"}}}) "
0 0 24 3 2 #"#t"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 4 #"test"
0 0 28 3 2 #" ("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"{"
0 0 16 3 5 #"local"
0 0 28 3 3 #" {{"
0 0 14 3 8 #"datatype"
0 0 28 3 1 #" "
0 0 14 3 4 #"List"
0 0 28 3 2 #" {"
0 0 14 3 5 #"Empty"
0 0 28 3 3 #"} {"
0 0 14 3 4 #"Cons"
0 0 28 3 1 #" "
0 0 14 3 1 #"a"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 5 #"}}} {"
0 0 14 3 5 #"Cons?"
0 0 28 3 2 #" {"
0 0 14 3 5 #"Empty"
0 0 28 3 4 #"}}})"
0 0 28 29 1 #"\n"
0 0 28 3 8 #"        "
0 0 24 3 2 #"#f"
0 0 28 3 7 #")      "
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 8 #";; match"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 4 #"test"
0 0 28 3 2 #" ("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"{"
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 2 #" {"
0 0 16 3 4 #"case"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 1 #" "
0 0 14 3 2 #"=>"
0 0 28 3 1 #" "
0 0 24 3 1 #"2"
0 0 28 3 4 #"}}) "
0 0 24 3 1 #"2"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 4 #"test"
0 0 28 3 2 #" ("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"{"
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 24 3 1 #"2"
0 0 28 29 1 #"\n"
0 0 28 3 17 #"                {"
0 0 16 3 4 #"case"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 1 #" "
0 0 14 3 2 #"=>"
0 0 28 3 1 #" "
0 0 24 3 1 #"2"
0 0 28 3 1 #"}"
0 0 28 29 1 #"\n"
0 0 28 3 17 #"                {"
0 0 16 3 4 #"case"
0 0 28 3 1 #" "
0 0 24 3 1 #"2"
0 0 28 3 1 #" "
0 0 14 3 2 #"=>"
0 0 28 3 1 #" "
0 0 24 3 1 #"3"
0 0 28 3 16 #"}})             "
0 0 28 29 1 #"\n"
0 0 28 3 8 #"        "
0 0 24 3 1 #"3"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 4 #"test"
0 0 28 3 2 #" ("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"{"
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 24 3 2 #"#t"
0 0 28 3 2 #" {"
0 0 16 3 4 #"case"
0 0 28 3 1 #" "
0 0 24 3 2 #"#t"
0 0 28 3 1 #" "
0 0 14 3 2 #"=>"
0 0 28 3 1 #" "
0 0 24 3 1 #"2"
0 0 28 3 4 #"}}) "
0 0 24 3 1 #"2"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 4 #"test"
0 0 28 3 2 #" ("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"{"
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 24 3 2 #"#f"
0 0 28 29 1 #"\n"
0 0 28 3 17 #"                {"
0 0 16 3 4 #"case"
0 0 28 3 1 #" "
0 0 24 3 2 #"#t"
0 0 28 3 1 #" "
0 0 14 3 2 #"=>"
0 0 28 3 1 #" "
0 0 24 3 1 #"2"
0 0 28 3 1 #"}"
0 0 28 29 1 #"\n"
0 0 28 3 17 #"                {"
0 0 16 3 4 #"case"
0 0 28 3 1 #" "
0 0 24 3 2 #"#f"
0 0 28 3 1 #" "
0 0 14 3 2 #"=>"
0 0 28 3 1 #" "
0 0 24 3 1 #"3"
0 0 28 3 16 #"}})             "
0 0 28 29 1 #"\n"
0 0 28 3 8 #"        "
0 0 24 3 1 #"3"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 4 #"test"
0 0 28 3 2 #" ("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"{"
0 0 16 3 5 #"local"
0 0 28 3 3 #" {{"
0 0 14 3 8 #"datatype"
0 0 28 3 1 #" "
0 0 14 3 3 #"Nat"
0 0 28 29 1 #"\n"
0 0 28 3 33 #"                                {"
0 0 14 3 4 #"Zero"
0 0 28 3 1 #"}"
0 0 28 29 1 #"\n"
0 0 28 3 33 #"                                {"
0 0 14 3 4 #"Succ"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 2 #"}}"
0 0 28 29 1 #"\n"
0 0 28 3 23 #"                      {"
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 4 #"pred"
0 0 28 3 2 #" {"
0 0 14 3 3 #"fun"
0 0 28 3 2 #" {"
0 0 14 3 1 #"n"
0 0 28 3 2 #"} "
0 0 28 29 1 #"\n"
0 0 28 3 41 #"                                        {"
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 29 1 #"\n"
0 0 28 3 43 #"                                          {"
0 0 16 3 4 #"case"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Zero"
0 0 28 3 2 #"} "
0 0 14 3 2 #"=>"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Zero"
0 0 28 3 2 #"}}"
0 0 28 29 1 #"\n"
0 0 28 3 43 #"                                          {"
0 0 16 3 4 #"case"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Succ"
0 0 28 3 1 #" "
0 0 14 3 1 #"m"
0 0 28 3 2 #"} "
0 0 14 3 2 #"=>"
0 0 28 3 1 #" "
0 0 14 3 1 #"m"
0 0 28 3 5 #"}}}}}"
0 0 28 29 1 #"\n"
0 0 28 3 17 #"                {"
0 0 14 3 5 #"Succ?"
0 0 28 3 2 #" {"
0 0 14 3 4 #"pred"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Succ"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Succ"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Zero"
0 0 28 3 7 #"}}}}}})"
0 0 28 29 1 #"\n"
0 0 28 3 8 #"        "
0 0 24 3 2 #"#t"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 4 #"test"
0 0 28 3 2 #" ("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"{"
0 0 16 3 5 #"local"
0 0 28 3 3 #" {{"
0 0 14 3 8 #"datatype"
0 0 28 3 1 #" "
0 0 14 3 3 #"Nat"
0 0 28 29 1 #"\n"
0 0 28 3 33 #"                                {"
0 0 14 3 4 #"Zero"
0 0 28 3 1 #"}"
0 0 28 29 1 #"\n"
0 0 28 3 33 #"                                {"
0 0 14 3 4 #"Succ"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 2 #"}}"
0 0 28 29 1 #"\n"
0 0 28 3 23 #"                      {"
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 4 #"pred"
0 0 28 3 2 #" {"
0 0 14 3 3 #"fun"
0 0 28 3 2 #" {"
0 0 14 3 1 #"n"
0 0 28 3 2 #"} "
0 0 28 29 1 #"\n"
0 0 28 3 41 #"                                        {"
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 29 1 #"\n"
0 0 28 3 43 #"                                          {"
0 0 16 3 4 #"case"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Zero"
0 0 28 3 2 #"} "
0 0 14 3 2 #"=>"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Zero"
0 0 28 3 2 #"}}"
0 0 28 29 1 #"\n"
0 0 28 3 43 #"                                          {"
0 0 16 3 4 #"case"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Succ"
0 0 28 3 1 #" "
0 0 14 3 1 #"m"
0 0 28 3 2 #"} "
0 0 14 3 2 #"=>"
0 0 28 3 1 #" "
0 0 14 3 1 #"m"
0 0 28 3 5 #"}}}}}"
0 0 28 29 1 #"\n"
0 0 28 3 17 #"                {"
0 0 14 3 5 #"Succ?"
0 0 28 3 2 #" {"
0 0 14 3 4 #"pred"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Succ"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Succ"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Zero"
0 0 28 3 8 #"}}}}}}) "
0 0 24 3 2 #"#t"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 32 #";tests for extended MiniScheme+ "
0 0 28 29 1 #"\n"
0 0 18 3 2 #"#;"
0 0 28 3 1 #"("
0 0 16 3 7 #"module+"
0 0 28 3 1 #" "
0 0 14 3 12 #"sanity-tests"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 14 3 4 #"test"
0 0 28 3 2 #" ("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 1 #"{"
0 0 16 3 5 #"local"
0 0 28 3 3 #" {{"
0 0 14 3 8 #"datatype"
0 0 28 3 1 #" "
0 0 14 3 3 #"Nat"
0 0 28 3 1 #" "
0 0 28 29 1 #"\n"
0 0 28 3 35 #"                                  {"
0 0 14 3 4 #"Zero"
0 0 28 3 2 #"} "
0 0 28 29 1 #"\n"
0 0 28 3 35 #"                                  {"
0 0 14 3 4 #"Succ"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 2 #"}}"
0 0 28 29 1 #"\n"
0 0 28 3 25 #"                        {"
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 4 #"pred"
0 0 28 3 2 #" {"
0 0 14 3 3 #"fun"
0 0 28 3 2 #" {"
0 0 14 3 1 #"n"
0 0 28 3 2 #"} "
0 0 28 29 1 #"\n"
0 0 28 3 43 #"                                          {"
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 29 1 #"\n"
0 0 28 3 45 #"                                            {"
0 0 16 3 4 #"case"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Zero"
0 0 28 3 2 #"} "
0 0 14 3 2 #"=>"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Zero"
0 0 28 3 2 #"}}"
0 0 28 29 1 #"\n"
0 0 28 3 45 #"                                            {"
0 0 16 3 4 #"case"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Succ"
0 0 28 3 1 #" "
0 0 14 3 1 #"m"
0 0 28 3 2 #"} "
0 0 14 3 2 #"=>"
0 0 28 3 1 #" "
0 0 14 3 1 #"m"
0 0 28 3 5 #"}}}}}"
0 0 28 29 1 #"\n"
0 0 28 3 19 #"                  {"
0 0 14 3 4 #"pred"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Succ"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Succ"
0 0 28 3 2 #" {"
0 0 14 3 4 #"Zero"
0 0 28 3 7 #"}}}}}) "
0 0 20 3 15 #"\"{Succ {Zero}}\""
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 4 #"test"
0 0 28 3 2 #" ("
0 0 14 3 3 #"run"
0 0 28 29 1 #"\n"
0 0 28 3 1 #" "
0 0 24 3 1 #"`"
0 0 28 3 1 #"{"
0 0 16 3 5 #"local"
0 0 28 3 1 #" "
0 0 32 3 1 #","
0 0 14 3 10 #"stream-lib"
0 0 28 29 1 #"\n"
0 0 28 3 11 #"          {"
0 0 16 3 5 #"local"
0 0 28 3 2 #" {"
0 0 32 3 1 #","
0 0 14 3 4 #"ones"
0 0 28 3 1 #" "
0 0 32 3 1 #","
0 0 14 3 11 #"stream-take"
0 0 28 3 1 #"}"
0 0 28 29 1 #"\n"
0 0 28 3 13 #"            {"
0 0 14 3 11 #"stream-take"
0 0 28 3 1 #" "
0 0 24 3 2 #"11"
0 0 28 3 1 #" "
0 0 14 3 4 #"ones"
0 0 28 3 5 #"}}}) "
0 0 20 3 30 #"\"{list 1 1 1 1 1 1 1 1 1 1 1}\""
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 4 #"test"
0 0 28 3 2 #" ("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"`"
0 0 28 3 1 #"{"
0 0 16 3 5 #"local"
0 0 28 3 1 #" "
0 0 32 3 1 #","
0 0 14 3 10 #"stream-lib"
0 0 28 29 1 #"\n"
0 0 28 3 11 #"          {"
0 0 16 3 5 #"local"
0 0 28 3 2 #" {"
0 0 32 3 1 #","
0 0 14 3 14 #"stream-zipWith"
0 0 28 3 1 #" "
0 0 32 3 1 #","
0 0 14 3 4 #"fibs"
0 0 28 3 1 #"}"
0 0 28 29 1 #"\n"
0 0 28 3 13 #"            {"
0 0 14 3 11 #"stream-take"
0 0 28 3 1 #" "
0 0 24 3 2 #"10"
0 0 28 3 1 #" "
0 0 14 3 4 #"fibs"
0 0 28 3 5 #"}}}) "
0 0 20 3 32 #"\"{list 1 1 2 3 5 8 13 21 34 55}\""
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 4 #"test"
0 0 28 3 2 #" ("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"`"
0 0 28 3 1 #"{"
0 0 16 3 5 #"local"
0 0 28 3 1 #" "
0 0 32 3 1 #","
0 0 14 3 10 #"stream-lib"
0 0 28 29 1 #"\n"
0 0 28 3 11 #"          {"
0 0 16 3 5 #"local"
0 0 28 3 2 #" {"
0 0 32 3 1 #","
0 0 14 3 4 #"ones"
0 0 28 3 1 #" "
0 0 32 3 1 #","
0 0 14 3 14 #"stream-zipWith"
0 0 28 3 1 #"}"
0 0 28 29 1 #"\n"
0 0 28 3 13 #"            {"
0 0 14 3 11 #"stream-take"
0 0 28 3 1 #" "
0 0 24 3 2 #"10"
0 0 28 29 1 #"\n"
0 0 28 3 26 #"                         {"
0 0 14 3 14 #"stream-zipWith"
0 0 28 29 1 #"\n"
0 0 28 3 27 #"                          {"
0 0 14 3 3 #"fun"
0 0 28 3 2 #" {"
0 0 14 3 1 #"n"
0 0 28 3 1 #" "
0 0 14 3 1 #"m"
0 0 28 3 1 #"}"
0 0 28 29 1 #"\n"
0 0 28 3 32 #"                               {"
0 0 14 3 1 #"+"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 1 #" "
0 0 14 3 1 #"m"
0 0 28 3 2 #"}}"
0 0 28 29 1 #"\n"
0 0 28 3 26 #"                          "
0 0 14 3 4 #"ones"
0 0 28 29 1 #"\n"
0 0 28 3 26 #"                          "
0 0 14 3 4 #"ones"
0 0 28 3 7 #"}}}})  "
0 0 20 3 28 #"\"{list 2 2 2 2 2 2 2 2 2 2}\""
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 4 #"test"
0 0 28 3 1 #" "
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 24 3 1 #"`"
0 0 28 3 1 #"{"
0 0 16 3 5 #"local"
0 0 28 3 1 #" "
0 0 32 3 1 #","
0 0 14 3 10 #"stream-lib"
0 0 28 29 1 #"\n"
0 0 28 3 16 #"               {"
0 0 16 3 5 #"local"
0 0 28 3 2 #" {"
0 0 32 3 1 #","
0 0 14 3 11 #"stream-take"
0 0 28 3 1 #" "
0 0 32 3 1 #","
0 0 14 3 10 #"merge-sort"
0 0 28 3 1 #" "
0 0 32 3 1 #","
0 0 14 3 4 #"fibs"
0 0 28 3 1 #" "
0 0 32 3 1 #","
0 0 14 3 14 #"stream-zipWith"
0 0 28 3 1 #"}"
0 0 28 29 1 #"\n"
0 0 28 3 18 #"                 {"
0 0 14 3 11 #"stream-take"
0 0 28 3 1 #" "
0 0 24 3 2 #"10"
0 0 28 3 2 #" {"
0 0 14 3 10 #"merge-sort"
0 0 28 3 1 #" "
0 0 14 3 4 #"fibs"
0 0 28 3 1 #" "
0 0 14 3 4 #"fibs"
0 0 28 3 8 #"}}}})   "
0 0 20 3 28 #"\"{list 1 1 1 1 2 2 3 3 5 5}\""
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0           0
